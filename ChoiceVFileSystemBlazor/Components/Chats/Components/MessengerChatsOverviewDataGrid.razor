@using ChoiceVFileSystemBlazor.Components.Chats.Pages
@using ChoiceVFileSystemBlazor.Database.Ucp.Messenger.DbModels
@using ChoiceVFileSystemBlazor.Database.Ucp.Messenger.Models
@using ChoiceVFileSystemBlazor.Database.Ucp.Bugtracker.DbModels
@if (_loading)
{
    <LoadingComponent/>
}
else if (!_loading && _data is null)
{
    <ErrorComponent/>
}
else
{
    <MudDataGrid
        T="ChatForDiscordIdModel" MultiSelection="true"
        Items="@_data" SortMode="SortMode.Multiple" Filterable="true"
        QuickFilter="@QuickFilter" RowClick="@RowClicked" Style="width: 100%;"
        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="@(Height is null ? "75vh" : Height)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@(Label ?? "Chat Übersicht")</MudText>
            <MudSpacer/>

            <MudTooltip Text="Neuen Chat starten" Duration="@Constants.TOOLTIP_DURATION">
                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="() => StartNewChat()"/>
            </MudTooltip>
            <MudTextField
                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.LastMessageSent" Title="LastMessageSent"/>
            <PropertyColumn Property="x => x.DiscordId" Title="DiscordId"/>
            <PropertyColumn Property="x => x.MessageCount" Title="MessageCount"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ChatForDiscordIdModel"/>
        </PagerContent>
    </MudDataGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    [Parameter] public int? AccountId { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Height { get; set; }
    [Parameter] public bool OnlyLive { get; set; }

    private bool _loading = true;
    private string? _searchString;

    private List<ChatForDiscordIdModel>? _data = [];

    public async Task Load(CancellationToken cancellationToken = default)
    {
        _loading = true;
        StateHasChanged();

        _data = await MessageProxy.GetAllChatsAsync();

        _loading = false;
        StateHasChanged();
    }

    private Func<ChatForDiscordIdModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;

        var lowerSearchString = _searchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.DiscordId.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.MessageCount}".ToLower().Contains(_searchString))
            return true;

        return false;
    };

    void RowClicked(DataGridRowClickEventArgs<ChatForDiscordIdModel> args)
    {
        Navigation.NavigateTo(MessengerChatView.GetRedirectUrl(args.Item.DiscordId));
    }

    private async Task StartNewChat()
    {
        var access = await UserAccessService.GetUserAccess();
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "DiscordId",
                string.Empty,
                "DiscordId"
            ),
            new(
                InputTypes.Text,
                "Nachricht",
                string.Empty,
                "Kuhle Nachricht",
                7
            )
        };

        var dialogData = await DialogService.OpenDialog(
            "Chat starten", 
            "Der Spieler wird über jede Nachricht über Discord benachrichtigt. Pass auf was du schreibst!", 
            "Absenden",
            inputs);
        if (dialogData is null) return;

        var (validatedDiscordId, parsedDiscordId) = dialogData[0].ValidateInput<string>();
        if (!validatedDiscordId)
        {
            Snackbar.Add("Es wurde kein richtige DiscordId angegeben!", Severity.Error);
            return;
        }

        if (!await DiscordBotService.ValidateDiscordId(parsedDiscordId!))
        {
            Snackbar.Add("Es wurde kein richtige DiscordId angegeben!!", Severity.Error);
            return;
        }
        
        var (validatedMessage, parsedMessage) = dialogData[1].ValidateInput<string>();
        if (!validatedMessage)
        {
            Snackbar.Add("Es wurde keine richtige Nachricht angegeben!", Severity.Error);
            return;
        }

        LoadingService.StartLoading();
        
        var newMessage = await MessageProxy.AddAsync(new MessageToDiscordIdDbModel(parsedDiscordId!, parsedMessage!, false, access.Name, access.Id));
        
        await DiscordBotService.SendNewMessageInfoToUserAsync(newMessage.ToDiscordId);
        
        Navigation.NavigateTo(MessengerChatView.GetRedirectUrl(newMessage.ToDiscordId));
        
        LoadingService.StopLoading();
    }

}