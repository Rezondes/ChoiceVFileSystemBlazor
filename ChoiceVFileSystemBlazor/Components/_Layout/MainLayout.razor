@inherits LayoutComponentBase

<MudThemeProvider Theme="@_currentTheme" IsDarkMode="@_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (_shouldRedirect)
{
    <NotAuthorized/>
}
else if (!_shouldRedirect && _loading)
{
    <PageLoading/>
}
else
{
    <MudText
        Style="
            opacity: 0.2;
            position: absolute;
            left: 395px;
            top: 0;
            z-index: 9999;
            color: white;"
        Typo="Typo.body2">
        @Constants.VERSION
    </MudText>
    
    <MudLayout Style="height: 100vh; overflow: hidden;">
        <MudAppBar> 
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
            <MudImage Src="choicev_logo_full_full.png"
                      Alt="ChoiceV Logo" 
                      Style="
                        width: 400px; 
                        margin-bottom: 3px;
                        margin-left: -5px;
                        " />
            <MudSpacer/>
            <MudButtonGroup Color="Color.Inherit">
                <MudTooltip Text="Zur Cloud" Duration="Constants.TOOLTIP_DURATION" Class="mr-5">
                    <MudIconButton Icon="@Icons.Material.Filled.Cloud" Color="Color.Inherit" Href="@Constants.CLOUD_URL" Target="_blank"/>
                </MudTooltip>
                <ThemeModeToggle IsDarkMode="_isDarkMode" OnDarkModeChanged="ToggleDarkMode"/>
                <MudTooltip Text="Eigener Account" Duration="Constants.TOOLTIP_DURATION">
                    <MudIconButton Icon="@Icons.Material.Filled.AccountBox" Color="Color.Inherit" OnClick="OpenAccessPage"/>
                </MudTooltip>
            </MudButtonGroup>
        </MudAppBar>

        <MudDrawer @bind-Open="_open" ClipMode="_clipMode" Breakpoint="_breakpoint" Variant="DrawerVariant.Mini" Style="height: calc(95% - var(--mud-appbar-height));">
            <NavMenu @ref="_navMenu"/>
        </MudDrawer>

        <MudMainContent Style="height: 100%; overflow: hidden;">
            <MudContainer Class="px-8" MaxWidth="MaxWidth.False" style="height: 100%; overflow-y: auto; padding: 16px 0;">
                @Body
            </MudContainer>
        </MudMainContent>

        <MudNavLink Href="https://github.com/Rezondes"
                    Icon="@Icons.Custom.Brands.GitHub"
                    Style="@GetStyle()">
            @if (_open)
            {
                <span>Created by Rezondes</span>
            }
        </MudNavLink>
    </MudLayout>
}

@code
{
    private string GetStyle()
    {
        const string mainStyle = "position: absolute; bottom: 0; height: 5%; margin-left: 0; background-color: var(--mud-palette-drawer-background);";

        return _open ? mainStyle + " width: var(--mud-drawer-width-left)" : mainStyle + " width: var(--mud-drawer-width-mini-left)";
    }
    
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _loading = true;
    private bool _shouldRedirect;
    
    public static HubConnection? BaseHubConnection;
    
    private bool _open = true;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private DrawerClipMode _clipMode = DrawerClipMode.Always;

    private MudTheme _currentTheme = new()
    {
        PaletteDark = new PaletteDark()
        {
            Primary = "rgb(204, 138, 37)",
        },
        PaletteLight = new PaletteLight()
        {
            Primary = "rgb(204, 138, 37)",
            AppbarBackground = "rgb(90,90,100)",
        }
    };
    private bool _isDarkMode = true;

    private NavMenu? _navMenu;

    private Timer? _saveToggleDrawer;
    private Timer? _saveLightMode;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var access = await UserAccessService.GetUserAccess();

        // nasty fix, but it works, so fuck it
        if (access.Settings is null)
        {
            _isDarkMode = true;
            _open = true;
        }
        else
        {
            _isDarkMode = access.Settings.IsDarkMode;
            _open = access.Settings.IsNavbarExpanded;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await JS.InvokeVoidAsync("setFavicon", "choicev_logo_partial.png");
        
        await CheckRedirect();
        
        await StartHubConnection();
            
        _loading = false;
        StateHasChanged();
    }

    private async Task CheckRedirect()
    {
        _navMenu?.Reload();
        
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri);
        var right = PageRightRegistry.GetNeededRankForPage(relativePath);
        var hasRight = await UserAccessService.HasRightAsync(right);
        if (!hasRight)
        {
            _shouldRedirect = true;
        }
        
        var access = await UserAccessService.GetUserAccess();
        if (access is null) // should never be null, but code does what it does
        {
            _shouldRedirect = true;
        }
        else if (access.Rank <= RankEnum.None)
        {
            _shouldRedirect = true;
        }
        
        _loading = false;
        if (!_shouldRedirect) return;

        StateHasChanged();
        
        Navigation.NavigateToNotAuthorized();
    }
    
    private async Task StartHubConnection()
    {
        BaseHubConnection = HubHelper.GetHubConnection(Navigation, BaseHub.HubPattern);
        
        BaseHubConnection.On(BaseHubMethodEnum.UpdateAccess.ToString(), async (Ulid accessId) =>
        {
            try
            {
                var access = await UserAccessService.GetUserAccess();
                if (access is null) return;
                if (accessId != access.Id) return;

                await InvokeAsync(UserAccessService.ReloadUserAccessAsync);
                await InvokeAsync(CheckRedirect);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        });
        
        BaseHubConnection.On(BaseHubMethodEnum.UpdateRights.ToString(), async () =>
        {
            try
            {
                var access = await UserAccessService.GetUserAccess();
                if (access is null) return;

                await InvokeAsync(UserAccessService.ReloadUserAccessAsync);
                await InvokeAsync(CheckRedirect);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        });
        
        await BaseHubConnection.StartAsync();
    }

    private async Task ToggleDrawer()
    {
        _open = !_open;
        StateHasChanged();

        _saveToggleDrawer?.Dispose();
        var access = await UserAccessService.GetUserAccess();
        _saveToggleDrawer = new Timer(async _ => await AccessProxy.UpdateIsNavbarExpandedAsync(access.Id, _open, access.Id), null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }
    private async Task ToggleDarkMode(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        
        _saveLightMode?.Dispose();
        var access = await UserAccessService.GetUserAccess();
        _saveLightMode = new Timer(async _ => await AccessProxy.UpdateIsDarkModeAsync(access.Id, newValue, access.Id), null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }
    
    private async Task OpenAccessPage()
    {
        var access = await UserAccessService.GetUserAccess();
        if (access is null) return;
        
        Navigation.NavigateTo(AccessView.GetRedirectUrl(access.Id.ToString()));
    }
}