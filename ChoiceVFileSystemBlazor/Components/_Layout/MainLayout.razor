@inherits LayoutComponentBase

<MudThemeProvider Theme="@_currentTheme" IsDarkMode="@_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (_shouldRedirect)
{
    <NotAuthorized/>
}
else if (!_shouldRedirect && _loading)
{
    <PageLoading/>
}
else
{
    <MudText
        Style="
            opacity: 0.2;
            position: absolute;
            left: 395px;
            top: 0;
            z-index: 9999;
            color: white;"
        Typo="Typo.body2">
        @Constants.VERSION
    </MudText>
    
    <MudLayout Style="height: 100vh; overflow: hidden;">
        @if (AuthorizationService.IsAuthenticated(MainLayout.AccessModel))
        {
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
                <MudImage Src="choicev_logo_full.png" Alt="ChoiceV Logo" Style="width: 100px; margin-bottom: 15px;" />
                <MudText Typo="Typo.h5" Style="color: white;">Support Control Panel</MudText>
                <MudSpacer/>
                <MudButtonGroup Color="Color.Inherit">
                    <MudTooltip Text="Zur Cloud" Duration="Constants.TOOLTIP_DURATION" Class="mr-5">
                        <MudIconButton Icon="@Icons.Material.Filled.Cloud" Color="Color.Inherit" Href="@Constants.CLOUD_URL" Target="_blank"/>
                    </MudTooltip>
                    <ThemeModeToggle IsDarkMode="_isDarkMode" OnDarkModeChanged="ToggleDarkMode"/>
                    <MudTooltip Text="Eigener Account" Duration="Constants.TOOLTIP_DURATION">
                        <MudIconButton Icon="@Icons.Material.Filled.AccountBox" Color="Color.Inherit" OnClick="OpenAccessPage"/>
                    </MudTooltip>
                </MudButtonGroup>
            </MudAppBar>

            <MudDrawer @bind-Open="_open" ClipMode="_clipMode" Breakpoint="_breakpoint" Variant="DrawerVariant.Mini">
                <NavMenu/>
            </MudDrawer>

            <MudMainContent Style="height: 100%; overflow: hidden;">
                @Body
            </MudMainContent>
        }
    </MudLayout>
}

@code
{
    private bool _loading = true;
    private bool _shouldRedirect;
    
    public static HubConnection? BaseHubConnection;
    
    private bool _open = true;
    private bool _dense = false;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private DrawerClipMode _clipMode = DrawerClipMode.Always;

    private MudTheme _currentTheme = new MudTheme()
    {
        PaletteDark = new PaletteDark()
        {
            Primary = "rgb(204, 138, 37)",
        },
        PaletteLight = new PaletteLight()
        {
            Primary = "rgb(204, 138, 37)",
            AppbarBackground = "rgb(90,90,100)",
        }
    };
    private bool _isDarkMode = true;
    
    public static ClaimsPrincipal? User;
    public static AccessDbModel? AccessModel;
    public static RankEnum Rank = RankEnum.None;
    public static List<RightEnum> Rights = [];

    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await LoadUserData();
        
        CheckRedirect();
            
        await StartHubConnection();
    }

    private void CheckRedirect()
    {
        if (!_shouldRedirect) return;

        Navigation.NavigateToNotAuthorized();
    }
    
    private async Task LoadUserData()
    {
        _loading = true;
        StateHasChanged();
        
        var user = await AuthenticationStateProvider.GetUser();
        if (user is null)
        {
            _shouldRedirect = true;
            _loading = false;
            StateHasChanged();
            return;
        }
        User = user;
        
        var account = await user.GetVerifiedUser(AccessProxy, AccountApi, DiscordRolesProxy);
        if (account is null)
        {
            _shouldRedirect = true;
            _loading = false;
            StateHasChanged();
            return;
        }
        
        AccessModel = account;

        Rank = AccessModel.Rank;
        if (Rank <= RankEnum.None)
        {
            _shouldRedirect = true;
            _loading = false;
            StateHasChanged();
            return;
        }
        
        var rightToRankDbModels = await RankProxy.GetAllRightsAsync(Rank);
        Rights = rightToRankDbModels.Select(x => x.Right).ToList();
        
        _loading = false;
        StateHasChanged();
    }
    
    private async Task StartHubConnection()
    {
        BaseHubConnection = HubHelper.GetHubConnection(Navigation, BaseHub.HubPattern);
        
        BaseHubConnection.On(BaseHubMethodEnum.UpdateAccess.ToString(), async (Ulid accessId) =>
        {
            try
            {
                if (AccessModel is null) return;
                if (accessId != AccessModel.Id) return;

                await InvokeAsync(LoadUserData);
                CheckRedirect();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        });
        
        BaseHubConnection.On(BaseHubMethodEnum.UpdateRights.ToString(), async () =>
        {
            try
            {
                if (AccessModel is null) return;

                await InvokeAsync(LoadUserData);
                CheckRedirect();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        });
        
        await BaseHubConnection.StartAsync();
    }

    public static bool HasRight(RightEnum requiredRight)
    {
        return Rank == RankEnum.Admin || Rights.Contains(requiredRight);
    }

    public static bool HasAnyRights(RightEnum[] rights)
    {
        return Rank == RankEnum.Admin || rights.Any(x => Rights.Contains(x));
    }

    private void ToggleDrawer() => _open = !_open;
    private void ToggleDarkMode(bool newValue) => _isDarkMode = newValue;

    private void OpenAccessPage()
    {
        if (AccessModel is null) return;
        
        Navigation.NavigateTo(AccessView.GetRedirectUrl(AccessModel.Id.ToString()));
    }
}