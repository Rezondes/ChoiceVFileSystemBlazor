@page "/companies/view/{id}"

@code {
    public const string Url = "/companies/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<PageTitle>Unternehmen Ansicht</PageTitle>

@if (_loading)
{
    <PageLoading/>
}
else if (!_loading && _model is null)
{
    <MudAlert Severity="Severity.Error">Ein Fehler ist aufgetreten!</MudAlert>
}
else if (_model is null)
{
    <MudAlert Severity="Severity.Error">Ein Fehler ist aufgetreten!</MudAlert>
}
else
{
    <MudContainer Class="px-8" MaxWidth="MaxWidth.False"  style="height: 100%; overflow-y: auto; padding: 16px 0;">
        <MudItem Style="height: 75px;">
            <MudText Typo="Typo.h3">@_model.Name</MudText>
        </MudItem>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="5" >
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Height="240px">
                            <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                                <MudIcon Icon="@Icons.Material.Filled.Info"/>
                                <MudText Class="px-5" Typo="Typo.h5">Spielerinformationen</MudText>
                            </div>
                            <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                                <MudText>Id: @_model.Id</MudText>
                                <MudText>ShortName: @_model.ShortName</MudText>
                                <MudText>CompanyType: @_model.CompanyType</MudText>
                                <MudText>StreetName: @_model.StreetName</MudText>
                                <MudText>Reputation: @_model.Reputation</MudText>
                                <MudText>RiskLevel: @_model.RiskLevel</MudText>
                            </MudContainer>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="7">
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Height="140px">
                            <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                                <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                                <MudText Class="px-5" Typo="Typo.h5">Funktionen</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                    <MudDataGrid
                        T="CompanyEmployeeApiModel" MultiSelection="true"
                        Items="@_model.Employees" SortMode="SortMode.Multiple" Filterable="true"
                        QuickFilter="@QuickFilter" RowClick="@RowClicked" Style="width: 100%;"
                        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="75vh">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Employee Ãœbersicht</MudText>
                            <MudSpacer />
                            <MudTextField
                                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                                Adornment="Adornment.Start" Immediate="true"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                IconSize="Size.Medium" Class="mt-0"/>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
                            <PropertyColumn Property="x => x.CharacterId" Title="CharacterId" />
                            <PropertyColumn Property="x => x.CharacterName" Title="CharacterName" />
                            <PropertyColumn Property="x => x.Salary" Title="Salary" />
                            <PropertyColumn Property="x => x.InDuty" Title="InDuty" />
                            <PropertyColumn Property="x => x.PhoneNumber" Title="PhoneNumber" />
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="CompanyEmployeeApiModel" />
                        </PagerContent>
                    </MudDataGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;
    
    [Parameter] public string Id { get; set; }
    private int _id;

    private CompanyApiModel? _model;

    private string? _searchString;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = UserAccessService.HasRight(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await Load();
    }
    
    private bool ParseId()
    {
        if (!int.TryParse(Id, out var companyId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = companyId;
        return true;
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var response = await CompanyApi.GetByCompanyIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _model = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
        
        StateHasChanged();
    }
    
    private Func<CompanyEmployeeApiModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.CharacterId.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.CharacterName.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Salary.ToString(CultureInfo.CurrentCulture).ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.InDuty.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.PhoneNumber.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(_searchString))
            return true;

        return false;
    };
    
    void RowClicked(DataGridRowClickEventArgs<CompanyEmployeeApiModel> args)
    {
        Navigation.NavigateTo(CharacterView.GetRedirectUrl(args.Item.CharacterId.ToString()));
    }
}