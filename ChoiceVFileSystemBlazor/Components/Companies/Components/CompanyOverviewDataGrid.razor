@if (_loading)
{
    <LoadingComponent/>
}
else
{
    <MudDataGrid
        T="CompanyApiModel" MultiSelection="true"
        Items="@_data" SortMode="SortMode.Multiple" Filterable="true"
        QuickFilter="@QuickFilter" RowClick="@RowClicked" Style="width: 100%;"
        Hideable="true" Hover="true" Striped="true" FixedHeader="true"  Height="@(Height ?? "75vh")">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@(Label ?? "Unternehmen Ãœbersicht")</MudText>
            <MudSpacer />
            <MudTextField
                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.ShortName" Title="ShortName" />
            <PropertyColumn Property="x => x.CompanyType" Title="CompanyType" />
            <PropertyColumn Property="x => x.Employees.Count" Title="Employees" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="CompanyApiModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    [Parameter] public int? CharacterId { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Height { get; set; }
    
    private bool _loading = true;
    private string? _searchString;

    private List<CompanyApiModel> _data = [];

    public async Task Load()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            ApiResponse<List<CompanyApiModel>> response;
            
            if (CharacterId.HasValue)
            {
                response = await CompanyApi.GetAllByCharacterIdAsync(CharacterId.Value);
            }
            else
            {
                response = await CompanyApi.GetAllAsync();
            }
            
            if (response.IsSuccessStatusCode)
            {
                _data = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
        
        StateHasChanged();
    }

    private Func<CompanyApiModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();
        
        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Name.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ShortName.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.CompanyType.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.MaxEmployees.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Employees.Count.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(lowerSearchString))
            return true;

        return false;
    };
    
    void RowClicked(DataGridRowClickEventArgs<CompanyApiModel> args)
    {
        Navigation.NavigateTo(CompanyView.GetRedirectUrl(args.Item.Id.ToString()));
    }
}