@page "/characters/view/{id}"

@implements IDisposable

@code {
    public const string Url = "/characters/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<PageTitle>Character Ansicht</PageTitle>

@if (_loading || !_isAuthorized || _shouldRedirect)
{
    <PageLoading/>
}
else if (_model is null)
{
    <PageLoading/>
}
else
{
    <MudItem Style="height: 75px;">
        <MudText Typo="Typo.h3">@GetTitleText()</MudText>
    </MudItem>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="5">
            <MudPaper Class="mud-width-full mud-height-full">
                <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                    <MudIcon Icon="@Icons.Material.Filled.Info"/>
                    <MudText Class="px-5" Typo="Typo.h5">Informationen</MudText>
                </div>
                
                <div class="d-flex align-items-center" style="padding: 15px 0 25px 0">
                    @if (_model.Gender == "M")
                    {
                        <MudTooltip Text="Männlich" Duration="@Constants.TOOLTIP_DURATION">
                            <MudAvatar Color="Color.Primary">M</MudAvatar>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Weiblich" Duration="@Constants.TOOLTIP_DURATION">
                            <MudAvatar Color="Color.Secondary">W</MudAvatar>
                        </MudTooltip>
                    }
                </div>
            
                <MudGrid>
                    <MudItem xs="6" Class="centered">
                        <MudText Color="Color.Warning">Hunger</MudText>
                        <MudTooltip Text="@_model.Hunger.ToString()" Duration="@Constants.TOOLTIP_DURATION" Color="Color.Warning">
                            <MudProgressCircular Color="Color.Warning" Value="@_model.Hunger" Max="100" Min="0"/>
                        </MudTooltip> 
                    </MudItem>
                    <MudItem xs="6" Class="centered">
                        <MudText Color="Color.Info">Thirst</MudText>
                        <MudTooltip Text="@_model.Thirst.ToString()" Duration="@Constants.TOOLTIP_DURATION" Color="Color.Info">
                            <MudProgressCircular Color="Color.Info" Value="@_model.Thirst" Max="100" Min="0"/>
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="6" Class="centered">
                        <MudText Color="Color.Primary">Energy</MudText>
                        <MudTooltip Text="@_model.Energy.ToString()" Duration="@Constants.TOOLTIP_DURATION" Color="Color.Primary">
                            <MudProgressCircular Color="Color.Primary" Value="@_model.Energy" Max="100" Min="0"/>
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="6" Class="centered">
                        <MudText Color="Color.Secondary">Health</MudText>
                        <MudTooltip Text="@_model.Health.ToString()" Duration="@Constants.TOOLTIP_DURATION" Color="Color.Secondary">
                            <MudProgressCircular Color="Color.Secondary" Value="@_model.Health" Max="100" Min="0"/>
                        </MudTooltip>
                    </MudItem>
                </MudGrid>

                <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                    <MudText Typo="Typo.h5">Weitere Infos:</MudText>

                    <MudText>Title: @(_model.Title ?? "Kein Titel")</MudText>

                    <MudText>BirthDate: @_model.BirthDate</MudText>

                    <MudText>Cash: @_model.Cash</MudText>

                    <MudText>Position: @_model.Position</MudText>
                    <MudText>Rotation: @_model.Rotation</MudText>
                    <MudText>Dimension: @_model.Dimension</MudText>

                    <MudText>LastLogin: @_model.LastLogin</MudText>
                    <MudText>LastLogout: @_model.LastLogout</MudText>
                </MudContainer>
            </MudPaper>
        </MudItem>

        <MudItem xs="7">
            <MudPaper Height="140px">
                <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                    <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                    <MudText Class="px-5" Typo="Typo.h5">Funktionen</MudText>
                </div>
                <div Class="d-flex flex-row justify-content-evenly mud-width-full py-8">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="OpenAccount">Account anzeigen</MudButton>
                    
                    @if (_model.IsCurrentlyOnline)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="ChangeDimension">Dimension ändern</MudButton>
                    }
                </div>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                @if (_inventoryLoading)
                {
                    <LoadingComponent/>
                }
                else if (_inventory is null)
                {
                    <ErrorComponent/>
                }
                else
                {
                    <MudDataGrid
                        T="InventoryItemApiModel" MultiSelection="true"
                        Items="@_inventory.Items" SortMode="SortMode.Multiple" Filterable="true"
                        QuickFilter="@QuickFilter" Style="width: 100%;"
                        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="400px" Class="mud-width-full">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Inventar</MudText>
                            <MudSpacer/>
                            <MudTextField
                                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                                Adornment="Adornment.Start" Immediate="true"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                IconSize="Size.Medium" Class="mt-0"/>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.Id" Title="#" Filterable="false"/>
                            <PropertyColumn Property="x => x.Name" Title="Name"/>
                            <PropertyColumn Property="x => x.Description" Title="Description"/>
                            <PropertyColumn Property="x => x.Quantity" Title="Quantity"/>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="InventoryItemApiModel"/>
                        </PagerContent>
                    </MudDataGrid>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <VehicleOverviewDataGrid @ref="_vehicleOverviewDataGrid" Height="400px" CharacterId="_id"/>
        </MudItem>
        
        <MudItem xs="12">
            <CompanyOverviewDataGrid @ref="_companyOverviewDataGrid" Height="400px" CharacterId="_id"/>
        </MudItem>
    
        <MudItem xs="12">
            <BankAccountOverviewDataGrid @ref="_bankAccountOverviewDataGrid" Height="400px" CharacterId="_id"/>
        </MudItem>
    
    </MudGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;

    [Parameter] public string Id { get; set; }
    private int _id;
    
    private CharacterApiModel? _model;
    
    private InventoryApiModel? _inventory;
    private string? _searchString;
    private bool _inventoryLoading = true;
    
    private VehicleOverviewDataGrid _vehicleOverviewDataGrid;
    private CompanyOverviewDataGrid _companyOverviewDataGrid;
    private BankAccountOverviewDataGrid _bankAccountOverviewDataGrid;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = UserAccessService.HasRight(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }
        
        await LoadAllAsync();
        
        ReloadService.OnCustomReload += LoadAllAsync;
    }
    
    public void Dispose()
    {
        ReloadService.OnCustomReload -= LoadAllAsync;
    }

    private bool ParseId()
    {
        if (!int.TryParse(Id, out var characterId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = characterId;
        return true;
    }

    private async Task LoadAllAsync()
    {
        _loading = true;
        _inventory = null;
        StateHasChanged();

        await LoadCharacterAsync();
        
        _loading = false;
        StateHasChanged();

        await LoadInventoryAsync();
        await _vehicleOverviewDataGrid.Load();
        await _companyOverviewDataGrid.Load();
        await _bankAccountOverviewDataGrid.Load();
    }

    private async Task LoadCharacterAsync()
    {
        try
        {
            var response = await CharacterApi.GetByCharacterIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _model = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task LoadInventoryAsync()
    {
        _inventoryLoading = true;
        StateHasChanged();
        
        try
        {
            var response = await InventoryApi.GetByCharacterIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _inventory = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        _inventoryLoading = false;
        StateHasChanged();
    }
    
    private Func<InventoryItemApiModel, bool> QuickFilter => x =>
    {
        if (_searchString is null) return true;
        
        var lowerSearchString = _searchString.ToLower();
        
        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Name.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description is not null && x.Description.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Quantity.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(lowerSearchString))
            return true;

        return false;
    };

    private string GetTitleText()
    {
        return _model is null ? string.Empty : $"[{_model.Id}] {_model.FirstName} {_model.MiddleName} {_model.LastName}";
    }
    
    private void OpenAccount()
    {
        if (_model is null) return;
        
        Navigation.NavigateTo(AccountView.GetRedirectUrl(_model.AccountId.ToString()));
    }

    private async Task ChangeDimension()
    {
        if (_model is null) return;
        if (!_model.IsCurrentlyOnline) return;
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Number,
                "Dimension",
                _model.Dimension.ToString(),
                "0"
            ),
        };

        var dialogData = await DialogService.OpenDialog(
            "Dimension ändern", 
            $"In welche Dimension willst du den Charakter {GetTitleText()} schicken?", 
            "Dimension ändern",
            inputs);
        if (dialogData is null) return;

        var (validated, dimension) = dialogData[0].ValidateInput<int>();
        if (!validated)
        {
            Snackbar.Add("Es wurde keine richtige Dimension eingegeben!", Severity.Error);
            return;
        }
        
        try
        {
            var response = await CharacterApi.ChangeDimensionAsync(_id, dimension);
            if (response.IsSuccessStatusCode)
            {
                var data = response.Content;
                if (data.CharacterId != _id)
                {
                    Snackbar.Add("Wenn dieser Fehler auftritt sind wird geficket.", Severity.Error);
                    return;
                }
                
                Snackbar.Add($"Dimension von {data.OldDimension} zu {data.NewDimension} gewechselt!", Severity.Success);

                _loading = true;
                await Task.Delay(TimeSpan.FromSeconds(1));
                await LoadAllAsync();
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        
    }
    
}