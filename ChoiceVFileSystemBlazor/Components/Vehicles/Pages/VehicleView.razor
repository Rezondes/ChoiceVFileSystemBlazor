@page "/vehicles/view/{id}"

@implements IDisposable

@code {
    public const string Url = "/vehicles/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<PageTitle>Fahrzeug Ansicht</PageTitle>

@if (_loading)
{
    <PageLoading/>
}
else if (!_loading && _model is null)
{
    <ErrorComponent/>
}
else if (_model is null)
{
    <ErrorComponent/>
}
else
{
    <MudItem Style="height: 75px;">
        <MudText Typo="Typo.h3"> [@_model.Id] @_model.NumberPlate</MudText>
    </MudItem>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="5" >
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Height="495px">
                        <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                            <MudIcon Icon="@Icons.Material.Filled.Info"/>
                            <MudText Class="px-5" Typo="Typo.h5">Informationen</MudText>
                        </div>
                        <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                            <MudText>ModelId: @_model.ModelId</MudText>
                            <MudText>ChassisNumber: @_model.ChassisNumber</MudText>
                            <MudText>Position: @_model.Position</MudText>
                            <MudText>Rotation: @_model.Rotation</MudText>
                            <MudText>GarageId: @_model.GarageId</MudText>
                            <MudText>RegisteredCompanyId: @_model.RegisteredCompanyId</MudText>
                            <MudText>Dimension: @_model.Dimension</MudText>
                            <MudText>LastMoved: @_model.LastMoved</MudText>
                            <MudText>NumberPlate: @_model.NumberPlate</MudText>
                            <MudText>CreateDate: @_model.CreateDate</MudText>
                            <MudText>Fuel: @_model.Fuel</MudText>
                            <MudText>DrivenDistance: @_model.DrivenDistance</MudText>
                            <MudText>KeyLockVersion: @_model.KeyLockVersion</MudText>
                            <MudText>DirtLevel: @_model.DirtLevel</MudText>
                            <MudText>RandomlySpawnedDate: @_model.RandomlySpawnedDate</MudText>
                            <MudText>ModelName: @_model.Config?.ModelName</MudText>
                            <MudText>DisplayName: @_model.Config?.DisplayName</MudText>
                        </MudContainer>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="7">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Height="140px">
                        <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                            <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                            <MudText Class="px-5" Typo="Typo.h5">Funktionen</MudText>
                        </div>
                        <div Class="d-flex flex-row justify-content-evenly mud-width-full py-8">
                            <WorkInProgressComponent/>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                <MudDataGrid
                    T="VehicleRegistrationApiModel" MultiSelection="true"
                    Items="@_model.Registrations" SortMode="SortMode.Multiple" Filterable="true"
                    QuickFilter="@QuickFilter" RowClick="@RowClicked" Style="width: 100%;"
                    Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="400px">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Registration Ãœbersicht</MudText>
                        <MudSpacer />
                        <MudTextField
                            T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                            Adornment="Adornment.Start" Immediate="true"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
                        <PropertyColumn Property="x => x.VehicleId" Title="VehicleId" />
                        <PropertyColumn Property="x => x.OwnerId" Title="OwnerId" />
                        <PropertyColumn Property="x => x.CompanyOwnerId" Title="CompanyOwnerId" />
                        <PropertyColumn Property="x => x.NumberPlate" Title="NumberPlate" />
                        <PropertyColumn Property="x => x.Start" Title="Start" />
                        <PropertyColumn Property="x => x.End" Title="End" />
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="VehicleRegistrationApiModel" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;
    
    [Parameter] public string Id { get; set; }
    private int _id;
    
    private VehicleApiModel? _model;
    
    private string? _searchString;
    
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = await UserAccessService.HasRightAsync(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
        
        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await Load();
    
        ReloadService.OnCustomReload += Load;
    }
    
    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
        
        ReloadService.OnCustomReload -= Load;
    }

    private bool ParseId()
    {
        if (!int.TryParse(Id, out var companyId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = companyId;
        return true;
    }
    
    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        var result = await VehicleApi.HandleApiRequestAsync(
            async token => await VehicleApi.GetByVehicleIdAsync(_id, token),
            _cancellationTokenSource.Token);
        
        if (result.IsSuccess)
        {
            _model = result.Data;
        }
        else
        {
            Snackbar.Add(result.Error?.Message ?? "Unknown error", Severity.Error);
        }
        
        _loading = false;
        StateHasChanged();
    }

    private Func<VehicleRegistrationApiModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.VehicleId.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.OwnerId.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.CompanyOwnerId.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.NumberPlate.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Start.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.End.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(_searchString))
            return true;

        return false;
    };

    void RowClicked(DataGridRowClickEventArgs<VehicleRegistrationApiModel> args)
    {
        var item = args.Item;

        if (item.OwnerId.HasValue)
        {
            Navigation.NavigateTo(CharacterView.GetRedirectUrl(item.OwnerId.Value.ToString()));
        }
        else if (item.CompanyOwnerId.HasValue)
        {
            Navigation.NavigateTo(CompanyView.GetRedirectUrl(item.CompanyOwnerId.Value.ToString()));
        }
    }
}