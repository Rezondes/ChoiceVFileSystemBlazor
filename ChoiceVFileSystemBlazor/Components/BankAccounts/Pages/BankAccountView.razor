@page "/bankaccounts/view/{id}"

@code {
    public const string Url = "/bankaccounts/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<PageTitle>Bankkonto Ansicht</PageTitle>

@if (_loading)
{
    <PageLoading/>
}
else if (!_loading && _model is null)
{
    <MudAlert Severity="Severity.Error">Ein Fehler ist aufgetreten!</MudAlert>
}
else if (_model is null)
{
    <MudAlert Severity="Severity.Error">Ein Fehler ist aufgetreten!</MudAlert>
}
else
{
    
    <MudContainer Class="px-8" MaxWidth="MaxWidth.False"  style="height: 100%; overflow-y: auto; padding: 16px 0;">
        <MudItem Style="height: 75px;">
            <MudText Typo="Typo.h3">@_model.Name</MudText>
        </MudItem>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="5" >
                <MudPaper Height="350px">
                    <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                        <MudIcon Icon="@Icons.Material.Filled.Info"/>
                        <MudText Class="px-5" Typo="Typo.h5">Kontoinformationen</MudText>
                    </div>
                    <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                        <MudText>Id: @_model.Id</MudText>
                        <MudText>BankCompany: @_model.BankCompany</MudText>
                        <MudText>AccountType: @_model.AccountType</MudText>
                        <MudText>Balance: @_model.Balance</MudText>
                        <MudText>OwnerType: @_model.OwnerType</MudText>
                        <MudText>OwnerValue: @_model.OwnerValue</MudText>
                        <MudText>IsFrozen: @_model.IsFrozen</MudText>
                        <MudText>CreationDate: @_model.CreationDate</MudText>
                        <MudText>IsDeactivated: @_model.IsDeactivated</MudText>
                        <MudText>ConnectedPhoneNumber: @_model.ConnectedPhoneNumber</MudText>
                        <MudText>IsInfinite: @_model.IsInfinite</MudText>
                    </MudContainer>
                </MudPaper>
            </MudItem>

            <MudItem xs="7">
                <MudPaper Height="140px">
                    <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                        <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                        <MudText Class="px-5" Typo="Typo.h5">Funktionen</MudText>
                    </div>
                    <div Class="d-flex flex-row justify-content-evenly mud-width-full py-8">
                        @* <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Timeout/Bann</MudButton> *@
                        @* <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Kicken</MudButton> *@
                        @* <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Whitelisting</MudButton> *@
                        @* <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Unstuck</MudButton> *@
                    </div>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </MudContainer>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;
    
    [Parameter] public string Id { get; set; }
    private int _id;

    private BankAccountApiModel? _model;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = UserAccessService.HasRight(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await Load();
    }
    
    private bool ParseId()
    {
        if (!int.TryParse(Id, out var bankAccountId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = bankAccountId;
        return true;
    }
    
    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var response = await BankAccountApi.GetBankAccountByIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _model = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
        
        StateHasChanged();
    }
}