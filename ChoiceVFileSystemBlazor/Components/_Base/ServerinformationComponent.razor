<style>
    .server-info-item {
        flex-direction: column;
        align-items: center;
        padding: 10px;
        margin: 5px;
        width: 300px;
    }
</style>

<MudItem xs="12" sm="6" md="12">
    <MudPaper Elevation="2" Class="pa-4" Style="height: 285px;">
        <div class="d-flex justify-center align-items-center mud-width-full" style="position: relative; padding-bottom: 15px;">
            <MudText Typo="Typo.h5">
                Aktuelle Serverinformationen
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="Reload" Style="position: absolute; right: 0; top: 0;"/>
        </div>

        @if (_loading)
        {
            <LoadingComponent/>
        }
        else if (_data is null)
        {
            <MudAlert Severity="Severity.Error">Ein Fehler ist aufgetreten!</MudAlert>
        }
        else
        {
            <div class="d-flex mud-width-full justify-content-around">
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.AccountBox"/> Accounts
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.OverallAccountCount</MudText>
                </MudPaper>
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCheck"/> davon gewhitelisted
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.WhitelistedAccountsCount</MudText>
                </MudPaper>
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.PlaylistRemove"/> davon gebannt
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.BannedAccountsCount</MudText>
                </MudPaper>
            </div>
            <div class="d-flex mud-width-full justify-content-around">
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.AccountCircle"/> Spieler online
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.PlayerOnlineCount</MudText>
                </MudPaper>
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.LocalPolice"/> Cops Online
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.PoliceInDutyCount</MudText>
                </MudPaper>
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.MedicalInformation"/> Medics Online
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.MedicInDutyCount</MudText>
                </MudPaper>
                <MudPaper class="d-flex server-info-item" Elevation="2">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.LocalPolice"/> Sheriffs Online
                    </MudText>
                    <MudText Typo="Typo.body1">@_data.SheriffInDutyCount</MudText>
                </MudPaper>
            </div>
            <div class="d-flex mud-width-full flex-row-reverse" style="opacity: 0.2; padding-top: 15px;">
                <MudText Typo="Typo.body1">letzte Aktualisierung: @_lastFetchedString</MudText>
            </div>
        }
    </MudPaper>
</MudItem>

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _loading;
    private CurrentServerInfosApiModel? _data;
    private DateTime _lastFetchedUtc = DateTime.UtcNow;
    private string? _lastFetchedString;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Load();
    }

    private async Task Reload()
    {
        if (_loading) return;
        if (_lastFetchedString is null) return;
        if ( DateTime.UtcNow - _lastFetchedUtc < TimeSpan.FromMinutes(1)) return;

        await Load();
    }
    
    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        var access = await UserAccessService.GetUserAccess();
        
        try
        {
            var response = await ServerApi.GetCurrentServerInfosAsync();
            if (response.IsSuccessStatusCode)
            {
                _data = response.Content;
                _lastFetchedUtc = DateTime.UtcNow;
                _lastFetchedString = _lastFetchedUtc.ConvertTimeFromUtcWithTimeZone(access.Settings.TimeZone);
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
        
        StateHasChanged();
    }
}