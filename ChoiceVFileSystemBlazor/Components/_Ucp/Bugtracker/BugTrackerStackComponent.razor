@using ChoiceVFileSystemBlazor.Components._Ucp.Helper
@using ChoiceVFileSystemBlazor.Database.Ucp.Bugtracker.DbModels

<style>
    .paper{
        height: 85dvh;
    }
    .title{
        height: 50px;
    }
    .stack{
        min-width: 400px;
        overflow-y: auto;
        max-height: calc(100% - 50px);
        padding: 5px;
    }
    .stack-item{
        min-height: 60px;
    }
    .clickable {
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .clickable:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }
</style>

<MudPaper Class="paper">
    <MudPaper Class="title py-2">
        <MudText Typo="Typo.h5" Align="Align.Center">@Title</MudText>
    </MudPaper>
    <MudStack Class="stack">
        @foreach (var task in Data)
        {
            <MudPaper Class="@GetTaskClass()" @onclick="() => OnTaskClick(task)" Elevation="3">
                <MudText Typo="Typo.body1" Class="p-2">[@task.BugTaskId] @task.BugTaskName</MudText>
            </MudPaper>
        }
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public List<DiscordIdToBugTaskIdDbModel> Data { get; set; }
    [Parameter] public bool ClickAbleChild { get; set; } = true;
    
    private async Task OnTaskClick(DiscordIdToBugTaskIdDbModel discordIdToBugTaskIdDbModel)
    {
        if (!ClickAbleChild) return;

        await discordIdToBugTaskIdDbModel.OpenDialog(VikunjaClientService, Snackbar, DialogService, AuthenticationStateProvider);
    }

    private string? GetTaskClass()
    {
        return ClickAbleChild ? "stack-item clickable" : "stack-item";
    }
}