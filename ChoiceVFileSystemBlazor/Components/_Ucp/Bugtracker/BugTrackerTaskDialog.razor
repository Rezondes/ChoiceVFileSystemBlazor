@using ChoiceVFileSystemBlazor.Services.Vikunja.Models

<MudDialog Style="height: 100%">
    <TitleContent>
        <MudItem Class="d-flex">
            <MudText Typo="Typo.h3" Style="color: rgba(255,255,255, 0.2)">#@Task.Id&nbsp;</MudText><MudText Typo="Typo.h3">@Task.Title</MudText>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="py-5">
            <MudText Typo="Typo.h4"><MudIcon Icon="@Icons.Material.Filled.Description"/> Beschreibung</MudText>
            <MudText Typo="Typo.h6">@Task.Description</MudText>
        </MudContainer>
        
        <MudContainer Class="py-5">
            <MudText Typo="Typo.h4"><MudIcon Icon="@Icons.Material.Filled.AttachFile"/> Anhänge</MudText>

            <MudList T="string">
                @foreach (var attachment in Attachments.OrderByDescending(x => x.Created))
                {
                    <MudPaper Class="my-2 d-flex">
                        <MudGrid>
                            <MudItem xs="4" @onclick="() => OpenAttachmentInPreview(attachment)" Class="d-flex justify-content-center align-items-center">
                            @if (attachment.File.Mime is not null)
                            {
                                <div style="max-width: 100px;">
                                    @if (GetFileUrl(attachment).StartsWith("data:image"))
                                    {
                                        <img src="@GetFileUrl(attachment)" style="max-width: 100%; height: auto;" alt=""/>
                                    }
                                    else if (GetFileUrl(attachment).StartsWith("data:application/pdf"))
                                    {
                                        <iframe src="@GetFileUrl(attachment)" width="100%" height="600px"></iframe>
                                    }
                                    else if (GetFileUrl(attachment).StartsWith("data:text/plain"))
                                    {
                                        <MudText>@System.Text.Encoding.UTF8.GetString(previewAttachment.File.Mime)</MudText>
                                    }
                                    else if (GetFileUrl(attachment).StartsWith("data:video"))
                                    {
                                        <video style="max-width: 100%;">
                                            <source src="@GetFileUrl(attachment)" type="@GetFileUrl(attachment).Split(';')[0].Split(':')[1]"/>
                                            Your browser does not support the video tag.
                                        </video>
                                    }
                                    else if (GetFileUrl(attachment).StartsWith("data:audio"))
                                    {
                                        <audio style="width: 100%;">
                                            <source src="@GetFileUrl(attachment)" type="@GetFileUrl(attachment).Split(';')[0].Split(':')[1]"/>
                                            Your browser does not support the audio element.
                                        </audio>
                                    }
                                    else
                                    {
                                        <MudText>Unsupported file type: @attachment.File.Name</MudText>
                                    }
                                </div>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Error">Es konnten keine Daten gefunden werden!</MudAlert>
                            }
                            </MudItem>
                            <MudItem xs="8">
                                <MudText>Name: @attachment.File.Name</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudList>
            <MudFileUpload T="IBrowserFile" FilesChanged="(file) => OpenNewFileInPreview(file)">
                <ActivatorContent>
                    <MudTooltip Text="Datei hochladen" Duration="Constants.TOOLTIP_DURATION">
                        <MudIconButton Icon="@Icons.Material.Filled.CloudUpload" Color="Color.Primary"/>
                    </MudTooltip>
                </ActivatorContent>
            </MudFileUpload>
        </MudContainer>
        
        <MudContainer Class="py-5">
            <MudText Typo="Typo.h4"><MudIcon Icon="@Icons.Material.Filled.Comment"/> Kommentare</MudText>
            <MudTextField T="string" Clearable Lines="10" @bind-Text="NewCommentText" Placeholder="Füge hier deinen Kommentar ein...">
                
            </MudTextField>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-2" OnClick="AddComment">Kommentieren</MudButton>

            <MudList T="string">
                @foreach (var comment in Comments.OrderByDescending(x => x.Created))
                {
                    var authorName = comment.Author.Id == VikunjaClientService.VikunjaApiUserId ? OwnDiscordName : comment.Author.Name;
                    var labelText = $"{authorName} am {comment.Created}";
                    
                    <MudPaper Class="my-2">
                        <MudListItem>
                            <MudTextField ReadOnly Lines="10" Label="@labelText" Value="@comment.Comment"/>
                        </MudListItem>
                    </MudPaper>
                }
            </MudList>
        </MudContainer>
        
    </DialogContent>
</MudDialog>
<MudOverlay @bind-Visible="showImagePreview" Absolute DarkBackground AutoClose ZIndex="99999"  OnClosed="o => OnClosePreview()">
    @if (GetFileUrl().StartsWith("data:image"))
    {
        <img src="@GetFileUrl()" style="max-width: 100%; height: auto;" alt=""/>
    }
    else if (GetFileUrl().StartsWith("data:application/pdf"))
    {
        <iframe src="@GetFileUrl()" width="100%" height="600px"></iframe>
    }
    else if (GetFileUrl().StartsWith("data:text/plain"))
    {
        <MudText>@System.Text.Encoding.UTF8.GetString(previewAttachment.File.Mime)</MudText>
    }
    else if (GetFileUrl().StartsWith("data:video"))
    {
        <video controls style="max-width: 100%;">
            <source src="@GetFileUrl()" type="@GetFileUrl().Split(';')[0].Split(':')[1]"/>
            Your browser does not support the video tag.
        </video>
    }
    else if (GetFileUrl().StartsWith("data:audio"))
    {
        <audio controls style="width: 100%;">
            <source src="@GetFileUrl()" type="@GetFileUrl().Split(';')[0].Split(':')[1]"/>
            Your browser does not support the audio element.
        </audio>
    }
    else
    {
        <MudText>Unsupported file type.</MudText>
    }
    @if (isNewUpload)
    {
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Style="position: absolute; bottom: -100px;">
            <MudButton OnClick="() => UploadPreview()"
                       Variant="Variant.Filled" Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.UploadFile">Hochladen</MudButton>
        </MudButtonGroup>
    }
</MudOverlay>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [Parameter] public VikunjaTask Task { get; set; }
    [Parameter] public List<VikunjaAttachment> Attachments { get; set; }
    [Parameter] public List<VikunjaComment> Comments { get; set; }
    [Parameter] public string OwnDiscordName { get; set; }

    private bool showImagePreview;
    private bool isNewUpload;
    private IBrowserFile? selectedFile;
    private VikunjaAttachment? previewAttachment;
    
    private string NewCommentText = string.Empty;

    private async Task AddComment(MouseEventArgs obj)
    {
        if (string.IsNullOrEmpty(NewCommentText)) return;
        
        LoadingService.StartLoading();
        
        var addResult = await VikunjaClientService.Client.HandleApiRequestAsync(
            async _ => await VikunjaClientService.Client.CreateNewTaskComment(Task.Id, new VikunjaComment(null, NewCommentText, null, null, null, null)));

        if (!addResult.IsSuccess)
        {
            LoadingService.StopLoading();
            Snackbar.Add("Etwas ist schief gelaufen. Kommentar wurde nicht hinzugefügt.", Severity.Error);
            return;
        }
        
        var getComments = await VikunjaClientService.Client.HandleApiRequestAsync(
            async _ => await VikunjaClientService.Client.GetAllCommentsForTaskAsync(Task.Id));
        if (getComments.IsSuccess)
        {
            Comments = getComments.Data;
        }
        else
        {
            Snackbar.Add("Kommentare konnten nicht neugeladen werden. Bitte lade die Seite manuell neu.", Severity.Error);
        }
        
        NewCommentText = string.Empty;
        LoadingService.StopLoading();
    }
    
    private async Task OpenAttachmentInPreview(VikunjaAttachment attachment)
    {
        if (attachment.File.Mime is null) return;

        previewAttachment = attachment;
        showImagePreview = true;
    }
    
    private string GetFileUrl(VikunjaAttachment? vikunjaAttachment = null)
    {
        var workingAttachment = previewAttachment;
        if (vikunjaAttachment is not null)
        {
            workingAttachment = vikunjaAttachment;
        }
        
        var base64Data = Convert.ToBase64String(workingAttachment.File.Mime);
        var fileType = "application/octet-stream"; 

        if (workingAttachment.File.Name.EndsWith(".jpg") || workingAttachment.File.Name.EndsWith(".jpeg"))
        {
            fileType = "image/jpeg";
        }
        else if (workingAttachment.File.Name.EndsWith(".png"))
        {
            fileType = "image/png";
        }
        else if (workingAttachment.File.Name.EndsWith(".gif"))
        {
            fileType = "image/gif";
        }
        else if (workingAttachment.File.Name.EndsWith(".bmp"))
        {
            fileType = "image/bmp";
        }
        else if (workingAttachment.File.Name.EndsWith(".pdf"))
        {
            fileType = "application/pdf";
        }
        else if (workingAttachment.File.Name.EndsWith(".txt"))
        {
            fileType = "text/plain";
        }
        else if (workingAttachment.File.Name.EndsWith(".mp4"))
        {
            fileType = "video/mp4";
        }
        else if (workingAttachment.File.Name.EndsWith(".webm"))
        {
            fileType = "video/webm";
        }
        else if (workingAttachment.File.Name.EndsWith(".ogg") || workingAttachment.File.Name.EndsWith(".oga"))
        {
            fileType = "audio/ogg";
        }
        else if (workingAttachment.File.Name.EndsWith(".mp3"))
        {
            fileType = "audio/mp3";
        }
        else if (workingAttachment.File.Name.EndsWith(".wav"))
        {
            fileType = "audio/wav";
        }
        else if (workingAttachment.File.Name.EndsWith(".svg"))
        {
            fileType = "image/svg+xml";
        }

        return $"data:{fileType};base64,{base64Data}";
    }

    private async Task OpenNewFileInPreview(IBrowserFile file)
    {
        if (file is null) return;
        
        selectedFile = file;
        var vikunjaFile = new VikunjaFile
        {
            Name = file.Name,
            Mime = await ConvertToByteArray(file)
        };

        previewAttachment = new VikunjaAttachment(null, null, vikunjaFile, null, Task.Id);
        showImagePreview = true;
        isNewUpload = true;
    }
    
    const int maxFileSize = 100 * 1024 * 1024;
    
    private async Task<byte[]> ConvertToByteArray(IBrowserFile file)
    {
        var supportedImageTypes = new HashSet<string> { "image/png", "image/jpeg", "image/jpg", "image/gif", "image/bmp", "image/svg+xml" };
        var supportedVideoTypes = new HashSet<string> { "video/mp4", "video/webm", "video/ogg" };
        var supportedAudioTypes = new HashSet<string> { "audio/mpeg", "audio/wav", "audio/ogg" };
        var supportedDocTypes = new HashSet<string> { "application/pdf", "text/plain" };

        if (supportedImageTypes.Contains(file.ContentType))
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 800, 600);
            await using var stream = resizedFile.OpenReadStream(maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            return memoryStream.ToArray();
        }
        
        if (supportedVideoTypes.Contains(file.ContentType) || supportedAudioTypes.Contains(file.ContentType) || supportedDocTypes.Contains(file.ContentType))
        {
            await using var stream = file.OpenReadStream(maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            return memoryStream.ToArray();
        }
        
        throw new NotSupportedException($"Der Dateityp {file.ContentType} wird nicht unterstützt.");
    }

    private async Task UploadPreview()
    {
        if (selectedFile is null || previewAttachment is null) return;

        var streamPart = new StreamPart(selectedFile.OpenReadStream(maxFileSize), selectedFile.Name, selectedFile.ContentType);

        LoadingService.StartLoading();
        try
        {
            await VikunjaClientService.Client.UploadFile(Task.Id, streamPart);            
            Attachments = await VikunjaClientService.Client.GetAllAttachmentsAsync(Task.Id);
            showImagePreview = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Hochladen der Datei: {ex.Message}");
        }
        LoadingService.StopLoading();
    }

    private void OnClosePreview()
    {
        selectedFile = null;
        previewAttachment = null;
        showImagePreview = false;
        isNewUpload = false;
    }
}