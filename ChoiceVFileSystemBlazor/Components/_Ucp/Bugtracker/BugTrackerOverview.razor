@page "/u/bugs"

@using ChoiceVFileSystemBlazor.Database.Ucp.Bugtracker.DbModels
@using ChoiceVFileSystemBlazor.Database.Ucp.Bugtracker.Proxies
@using ChoiceVFileSystemBlazor.Services.Vikunja.Models
@implements IDisposable

@code {
    public const string Url = "/u/bugs";
    public static string GetRedirectUrl() => Url;
}

@if (_loading)
{
    <LoadingComponent/>
}
else if (_failed)
{  
    <ErrorComponent/>
}
else
{
    <style>
        .paper{
            height: 80dvh;
        }
        .stack{
            min-width: 350px;
        }
    </style>
    
    <MudContainer Gutters="false" MaxWidth="MaxWidth.ExtraLarge">
        <MudAppBar Fixed="false" Gutters="true">
            <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large">Bugreport erstellen</MudButton>
        </MudAppBar>
        
        <MudContainer Gutters="false" MaxWidth="MaxWidth.ExtraLarge" Class="d-flex justify-content-around py-5">
            @* @if (_rejectedData.Any()) *@
            @* { *@
            <BugTrackerStackComponent Title="Abgelehnt" Data="_rejectedData"/>
            @* } *@

            <BugTrackerStackComponent Title="In PrÃ¼fung" Data="_underExaminationData"/>

            <BugTrackerStackComponent Title="Akzeptiert" Data="_acceptedData"/>
            
            <BugTrackerStackComponent Title="Abgeschlossen" Data="_doneData"/>
        </MudContainer>
    </MudContainer>
}

@code {
    private bool _loading = true;
    private bool _failed;
    private readonly Dictionary<DiscordIdToBugTaskIdDbModel, VikunjaTask?> _rejectedData = new();
    private readonly Dictionary<DiscordIdToBugTaskIdDbModel, VikunjaTask?> _underExaminationData = new();
    private readonly Dictionary<DiscordIdToBugTaskIdDbModel, VikunjaTask?> _acceptedData = new();
    private readonly Dictionary<DiscordIdToBugTaskIdDbModel, VikunjaTask?> _doneData = new();

    protected override async Task OnInitializedAsync()
    {
        
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Load();
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        var discordId = await AuthenticationStateProvider.GetDiscordUserIdAsync();
        if (discordId is null)
        {
            Snackbar.Add("Code: CrazyDuck. Bitte Lade die Seite neu oder melde ich Support!");
            _failed = true;
            _loading = false;
            return;
        }
        
        var dbSavedTasks = await BugtrackerProxy.GetAllForDiscordIdAsync(discordId);
        foreach (var dbTask in dbSavedTasks)
        {
            var result = await VikunjaClientService.Client.HandleApiRequestAsync(
                async _ => await VikunjaClientService.Client.GetTaskByIdAsync(dbTask.BugTaskId));

            if (!result.IsSuccess)
            {
                _rejectedData.Add(dbTask, null);
                continue;
            }

            var data = result.Data!;
            
            if (data.ProjectId == VikunjaClientService.ScpBugsProjectId)
            {
                _underExaminationData.Add(dbTask, data);
                continue;
            }
            
            if (data.ProjectId == VikunjaClientService.ChoiceVBugsProjectId && !data.Done)
            {
                _acceptedData.Add(dbTask, data);
                continue;
            }
            
            _doneData.Add(dbTask, data);
        }
        
        _loading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        
    }
}