@page "/u/bugs/my"

@using ChoiceVFileSystemBlazor.Components._Ucp.Helper
@using ChoiceVFileSystemBlazor.Database.Ucp.Bugtracker.DbModels
@using ChoiceVFileSystemBlazor.Services.Vikunja.Models

@code {
    public const string Url = "/u/bugs/my";
    public static string GetRedirectUrl() => Url;
}

@if (_loading)
{
    <LoadingComponent/>
}
else if (_failed)
{  
    <ErrorComponent/>
}
else
{
    <style>
        .fixed-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }
    </style>
    
    <MudContainer Gutters="false" MaxWidth="MaxWidth.ExtraLarge">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.ExtraLarge" Class="d-flex justify-content-around py-5">
            @if (_rejectedData.Any())
            {
                <BugTrackerStackComponent Title="Kein Bug/Feature" Data="_rejectedData" ClickAbleChild="false"/>
            }

            <BugTrackerStackComponent Title="In Prüfung" Data="_underExaminationData"/>

            <BugTrackerStackComponent Title="Akzeptiert" Data="_acceptedData"/>
            
            <BugTrackerStackComponent Title="Abgeschlossen" Data="_doneData"/>
        </MudContainer>
    </MudContainer>
    
    <MudFab StartIcon="@Icons.Material.Filled.Add" OnClick="AddBugReport" Color="Color.Tertiary" Size="Size.Large" Class="fixed-button"/>
}

@code {
    private bool _loading = true;
    private bool _failed;
    private readonly List<DiscordIdToBugTaskIdDbModel> _rejectedData = new();
    private readonly List<DiscordIdToBugTaskIdDbModel> _underExaminationData = new();
    private readonly List<DiscordIdToBugTaskIdDbModel> _acceptedData = new();
    private readonly List<DiscordIdToBugTaskIdDbModel> _doneData = new();

    protected override async Task OnInitializedAsync()
    {
        
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Load();
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();
        
        _rejectedData.Clear();
        _underExaminationData.Clear();
        _acceptedData.Clear();
        _doneData.Clear();
        
        var discordId = await AuthenticationStateProvider.GetDiscordUserIdAsync();
        if (discordId is null)
        {
            Snackbar.Add("Code: CrazyDuck. Bitte Lade die Seite neu oder melde ich Support!");
            _failed = true;
            _loading = false;
            return;
        }
        
        var scpBugsResult = await VikunjaClientService.Client.GetAllTasksInProjectAsync(VikunjaClientService.ScpBugsProjectId);
        
        var choiceVBugsResult = await VikunjaClientService.Client.GetAllTasksInProjectAsync(VikunjaClientService.ChoiceVBugsProjectId);
        
        var dbSavedTasks = await BugtrackerProxy.GetAllForDiscordIdAsync(discordId);
        foreach (var dbTask in dbSavedTasks)
        {
            if (scpBugsResult!.Select(x => x.Id).Contains(dbTask.BugTaskId))
            {
                _underExaminationData.Add(dbTask);
                continue;
            }
            if (choiceVBugsResult.Select(x => x.Id).Contains(dbTask.BugTaskId))
            {
                var result = await VikunjaClientService.Client.HandleApiRequestAsync(
                    async _ => await VikunjaClientService.Client.GetTaskByIdAsync(dbTask.BugTaskId));

                if (result.Data!.Done)
                {
                    _doneData.Add(dbTask);
                }
                else
                {
                    _acceptedData.Add(dbTask);
                }
                continue;
            }
            
            _rejectedData.Add(dbTask);
        }
        
        _loading = false;
        StateHasChanged();
    }

    private async Task AddBugReport()
    {
        var discordId = await AuthenticationStateProvider.GetDiscordUserIdAsync();
        if (discordId is null)
        {
            return;
        }
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "Titel",
                string.Empty,
                "Ultra fetter Bug digga"
            ),
            new(
                InputTypes.Text,
                "Beschreibung",
                string.Empty,
                "Beschreibe hier deinen Bug/Feature so ausführlich wie möglich.",
                7
            )
        };

        var dialogData = await DialogService.OpenDialog(
            "Bug reporten", 
            "Was möchtest du reporten?", 
            "Absenden",
            inputs);
        if (dialogData is null) return;

        var (validatedTitle, parsedTitle) = dialogData[0].ValidateInput<string>();
        if (!validatedTitle)
        {
            Snackbar.Add("Es wurde kein richtiger Titel angegeben!", Severity.Error);
            return;
        }
        
        var (validatedDescription, parsedDescription) = dialogData[1].ValidateInput<string>();
        if (!validatedDescription)
        {
            Snackbar.Add("Es wurde keine richtige Beschreibung angegeben!", Severity.Error);
            return;
        }
        
        LoadingService.StartLoading();
        
        var addResult = await VikunjaClientService.Client.HandleApiRequestAsync(
            async _ => await VikunjaClientService.Client.CreateNewTaskAsync(VikunjaClientService.ScpBugsProjectId, new VikunjaTask(parsedTitle!, parsedDescription!)));
        
        LoadingService.StopLoading();
        
        if (!addResult.IsSuccess)
        {
            Snackbar.Add("Ein Fehler ist aufgetreten.");
            return;
        }

        LoadingService.StartLoading();
        
        var addedTask = addResult.Data!;
        var discordIdToBugTaskIdDbModel = await BugtrackerProxy.AddAsync(new DiscordIdToBugTaskIdDbModel(discordId, addedTask.Id, addedTask.Title));
        
        Snackbar.Add($"[{addedTask.Id}] {addedTask.Title} wurde hinzufügt!", Severity.Success);
        await Load();

        LoadingService.StopLoading();
        await discordIdToBugTaskIdDbModel.OpenDialog(VikunjaClientService, Snackbar, DialogService, AuthenticationStateProvider);
    }
}