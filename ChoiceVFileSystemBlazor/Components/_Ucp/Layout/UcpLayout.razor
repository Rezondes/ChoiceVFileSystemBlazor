@inherits LayoutComponentDisposableBase

@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication

<MudThemeProvider Theme="@_currentTheme" IsDarkMode="@_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout Style="height: 100vh; overflow: hidden;">
    <MudAppBar>
        @if (AuthenticationStateProvider.IsAuthenticatedAsync().GetAwaiter().GetResult())
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer"/>
        }
        
        <MudImage Src="choicev_logo_ucp.png"
                  Alt="ChoiceV UCP Logo"
                  Style="
                        width: 400px; 
                        margin-bottom: 3px;
                        margin-left: -5px;
                        " />
        <MudSpacer/>

        <MudButtonGroup Color="Color.Inherit">
            <ThemeModeToggle IsDarkMode="_isDarkMode" OnDarkModeChanged="ToggleDarkMode"/>
            @if (AuthenticationStateProvider.IsAuthenticatedAsync().GetAwaiter().GetResult())
            {
                <MudTooltip Text="Ausloggen" Duration="Constants.TOOLTIP_DURATION">
                    <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Error" OnClick="Logout"/>
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Einloggen" Duration="Constants.TOOLTIP_DURATION">
                    <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Success" OnClick="Login"/>
                </MudTooltip>
            }
        </MudButtonGroup>
    </MudAppBar>
    
    @if (AuthenticationStateProvider.IsAuthenticatedAsync().GetAwaiter().GetResult())
    {
        <MudDrawer @bind-Open="_open" ClipMode="_clipMode" Breakpoint="_breakpoint" Variant="DrawerVariant.Mini" Style="height: calc(100% - 40px - var(--mud-appbar-height)); transition: width;">
            <UcpNavMenu @ref="_navMenu"/>
        </MudDrawer>
    }
    
    <MudMainContent Style="height: 100%; overflow: hidden;">
        <MudContainer MaxWidth="MaxWidth.False" style="height: 100%; overflow-y: hidden; padding: 0 0; position: relative; display: flex; justify-content: center;">
            @if (AuthenticationStateProvider.IsAuthenticatedAsync().GetAwaiter().GetResult())
            {
                @Body
            }
            else
            {
                <MudAlert Severity="Severity.Info" Style="height: fit-content">Du bist noch nicht eingeloggt.</MudAlert>
            }

            <MudOverlay Visible="@LoadingService.ShowLoading" DarkBackground="true" ZIndex="99999" Absolute="true">
                <PageLoading/>
            </MudOverlay>
        </MudContainer>
    </MudMainContent>
    
    @if (AuthenticationStateProvider.IsAuthenticatedAsync().GetAwaiter().GetResult())
    {
        <MudNavLink Href="https://github.com/Rezondes"
                    Icon="@Icons.Custom.Brands.GitHub"
                    Style="@GetStyle()">
            @if (_open)
            {
                <span>Created by Rezondes</span>
            }
        </MudNavLink>
    }
</MudLayout>

@code {
    private readonly MudTheme _currentTheme = new()
    {
        PaletteDark = new PaletteDark
        {
            Primary = "rgb(204, 138, 37)",
            TableHover = "rgb(204, 138, 37)"
        },
        PaletteLight = new PaletteLight
        {
            Primary = "rgb(204, 138, 37)",
            AppbarBackground = "rgb(90,90,100)",
            TableHover = "rgb(204, 138, 37)"
        }
    };
    
    private bool _isDarkMode = true;

    private UcpNavMenu? _navMenu;
    private bool _open = true;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private DrawerClipMode _clipMode = DrawerClipMode.Always;
    
    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        
        var loginRequired = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).ContainsKey("login");
        if (loginRequired)
        {
            if (await AuthenticationStateProvider.IsAuthenticatedAsync())
            {
                Navigation.NavigateTo("/", forceLoad: true);
                return;
            }
            
            var context = HttpContextAccessor.HttpContext;
            if (context is null) return;
            await context.ChallengeAsync("Discord");
        }
        
        var logoutRequired = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).ContainsKey("logout");
        if (logoutRequired)
        {
            if (!await AuthenticationStateProvider.IsAuthenticatedAsync()) return;
            var context = HttpContextAccessor.HttpContext;
            if (context is null) return;
            
            context.Response.Cookies.Delete(".AspNetCore.Identity.Application", new CookieOptions
            {
                Secure = true,
                SameSite = SameSiteMode.None
            });
            await context.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JS.InvokeVoidAsync("setFavicon", "choicev_logo_partial.png");
    }
    
    private void ToggleDrawer()
    {
        _open = !_open;
        StateHasChanged();
    }
    
    private void ToggleDarkMode(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
    }
    
    private string GetStyle()
    {
        const string mainStyle = "position: absolute; bottom: 0; height: 40px; margin-left: 0; background-color: var(--mud-palette-drawer-background);";

        return _open ? mainStyle + " width: var(--mud-drawer-width-left)" : mainStyle + " width: var(--mud-drawer-width-mini-left)";
    }

    private async Task Login()
    {
        if (await AuthenticationStateProvider.IsAuthenticatedAsync()) return;
        
        var currentUrl = Navigation.Uri.Replace(Navigation.BaseUri, "");
        Navigation.NavigateTo($"/{Uri.EscapeDataString(currentUrl)}?login=true", forceLoad: true);
    }

    private async Task Logout()
    {
        if (!await AuthenticationStateProvider.IsAuthenticatedAsync()) return;
        
        var currentUrl = Navigation.Uri.Replace(Navigation.BaseUri, "");
        Navigation.NavigateTo($"/{Uri.EscapeDataString(currentUrl)}?logout=true", forceLoad: true);
    }
}