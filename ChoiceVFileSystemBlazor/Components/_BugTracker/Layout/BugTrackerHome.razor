@page "/bugtracker"

@using ChoiceVFileSystemBlazor.Components._BugTracker.Dialogs
@using ChoiceVFileSystemBlazor.Components._BugTracker.Hubs
@using ChoiceVFileSystemBlazor.Database.BugTracker.Enums
@using ChoiceVFileSystemBlazor.Database.BugTracker.Proxies.Interfaces
@using ChoiceVFileSystemBlazor.Database.BugTracker.DbModels

@inject IBugTrackerProxy BugTrackerProxy
@inject IAccessProxy AccessProxy

@if (_loading)
{
    <LoadingComponent/>
}
else
{
    <style>
        body {
            overflow-y: hidden;
        }
    </style>
    
    <MudDropContainer
        T="BugTrackerTaskItemDbModel"
        ItemDisabled="@(item => !isAuthenticated)"
        Items="_data"
        ItemsSelector="@((item, dropzone) => item.Status.ToString() == dropzone)"
        ItemDropped="ItemUpdated"
        Class="d-flex justify-content-center"
        Style="height: 90vh">

        <ChildContent>
            <MudGrid Style="align-content: center; justify-content: space-around !important;">
                <MudItem Class="rounded mud-background-gray pa-6 flex-grow-1" Style="max-height: 85dvh; height: 85dvh; margin: 32px 8px; width: calc(100dvw / 3 - 15px);">
                    <MudItem Class="d-flex mb-4 justify-content-around" Style="height: 7%;">
                        <MudText Typo="Typo.h6" Class="align-content-around">Neu</MudText>

                        @if (isAuthenticated)
                        {
                            <MudTooltip Text="Bug hinzufügen" Duration="@Constants.TOOLTIP_DURATION">
                                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="() => AddTask(BugTrackerStatusEnum.Created)"/>
                            </MudTooltip>
                        }
                    </MudItem>
                    <MudDropZone
                        T="BugTrackerTaskItemDbModel" Identifier="@BugTrackerStatusEnum.Created.ToString()"
                        AllowReorder Class="rounded mud-background-gray flex-grow-1" Style="overflow-y: auto; overflow-x: hidden; height: 93.99%; padding: 0 5px;">
                    </MudDropZone>
                </MudItem>
                <MudItem Class="rounded mud-background-gray pa-6 flex-grow-1" Style="max-height: 85dvh; height: 85dvh; margin: 32px 8px; width: calc(100dvw / 3 - 15px);">
                    <MudItem Class="d-flex mb-4 justify-content-around" Style="height: 7%;">
                        <MudText Typo="Typo.h6" Class="align-content-around">In Bearbeitung</MudText>

                        @if (hasScpAccess)
                        {
                            <MudTooltip Text="Bug hinzufügen" Duration="@Constants.TOOLTIP_DURATION">
                                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="() => AddTask(BugTrackerStatusEnum.WorkInProgress)"/>
                            </MudTooltip>
                        }
                    </MudItem>
                    <MudDropZone 
                        T="BugTrackerTaskItemDbModel" Identifier="@BugTrackerStatusEnum.WorkInProgress.ToString()"
                        AllowReorder Class="rounded mud-background-gray flex-grow-1" Style="overflow-y: auto; overflow-x: hidden; height: 93.99%; padding: 0 5px;">
                    </MudDropZone>
                </MudItem>
                <MudItem Class="rounded mud-background-gray pa-6 flex-grow-1" Style="max-height: 85dvh; height: 85dvh; margin: 32px 8px; width: calc(100dvw / 3 - 15px);">
                    <MudItem Class="d-flex mb-4 justify-content-around" Style="height: 7%;">
                        <MudText Typo="Typo.h6" Class="align-content-around">Abgeschlossen</MudText>
                    </MudItem>
                    <MudDropZone 
                        T="BugTrackerTaskItemDbModel" Identifier="@BugTrackerStatusEnum.Done.ToString()"
                        AllowReorder Class="rounded mud-background-gray flex-grow-1" Style="overflow-y: auto; overflow-x: hidden; height: 93.99%; padding: 0 5px;">
                    </MudDropZone>
                </MudItem>
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4" @onclick="@(() => OpenItemDialog(context))" Style="overflow: hidden;">
                @if (context.Category == BugTrackerCategoryEnum.Allgemein)
                {
                    <MudChip T="string" Color="Color.Primary">Allgemein</MudChip>
                }
                else if (context.Category == BugTrackerCategoryEnum.Modding)
                {
                    <MudChip T="string" Color="Color.Info">Modding</MudChip>
                }
                else if (context.Category == BugTrackerCategoryEnum.Performance)
                {
                    <MudChip T="string" Color="Color.Secondary">Performance</MudChip>
                }
                else if (context.Category == BugTrackerCategoryEnum.Funktion)
                {
                    <MudChip T="string" Color="Color.Warning">Funktion</MudChip>
                }
                else
                {
                    throw new ArgumentOutOfRangeException();
                }

                @if (context.Priority == BugTrackerPriorityEnum.Low)
                {
                    <MudChip T="string" Color="Color.Info">Low</MudChip>
                }
                else if (context.Priority == BugTrackerPriorityEnum.Normal)
                {
                    <MudChip T="string" Color="Color.Success">Normal</MudChip>
                }
                else if (context.Priority == BugTrackerPriorityEnum.Important)
                {
                    <MudChip T="string" Color="Color.Warning">Important</MudChip>
                }
                else if (context.Priority == BugTrackerPriorityEnum.Critical)
                {
                    <MudChip T="string" Color="Color.Error">Critical</MudChip>
                }
                else
                {
                    throw new ArgumentOutOfRangeException();
                }

                <MudText Typo="Typo.h6" Class="mt-2">
                    @((context.Title.Length > 50) ? context.Title[..50] + "..." : context.Title)
                </MudText>

                <MudText Typo="Typo.body2" Class="mt-1">
                    @((context.Description.Length > 100) ? context.Description[..100] + "..." : context.Description)
                </MudText>
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
}


@code {
    private bool _loading = true;

    private List<BugTrackerTaskItemDbModel> _data = [];

    private HubConnection? _hubConnection;

    private bool hasScpAccess;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await IsAuthenticated();
        hasScpAccess = await HasScpAccess();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _data = await BugTrackerProxy.GetAllAsync();
        await StartHubConnection();

        _loading = false;
        StateHasChanged();
    }

    private async Task StartHubConnection()
    {
        _hubConnection = HubHelper.GetHubConnection(Navigation, BugTrackerHub.HubPattern);

        _hubConnection.On<Ulid>("ReceiveTaskUpdate", async (taskId) =>
        {
            await InvokeAsync(UpdateTaskFromHub);
            await InvokeAsync(StateHasChanged);
        });

        _hubConnection.Closed += async (_) =>
        {
            Console.WriteLine("Connection closed. Attempting to reconnect...");
            await Task.Delay(1000);
            await StartHubConnection();
        };

        await _hubConnection.StartAsync();
    }

    private async Task ItemUpdated(MudItemDropInfo<BugTrackerTaskItemDbModel> dropItem)
    {
        if (!hasScpAccess) return;
        
        if (dropItem.Item is null) return;

        Enum.TryParse(dropItem.DropzoneIdentifier, out BugTrackerStatusEnum value);
        if (dropItem.Item.Status == value) return;

        dropItem.Item.Status = value;

        await UpdateTask(dropItem.Item);
    }

    private async Task UpdateTask(BugTrackerTaskItemDbModel task)
    {
        if (_hubConnection is null || _hubConnection.State == HubConnectionState.Disconnected)
        {
            Snackbar.Add("Code: BuggyDackel. Bitte Lade die Seite neu!", Severity.Error);
            return;
        }

        await BugTrackerProxy.UpdateAsync(task);
        await _hubConnection.InvokeAsync("SendTaskUpdate", task.Id);
    }

    private async Task AddTask(BugTrackerTaskItemDbModel task)
    {
        if (_hubConnection is null || _hubConnection.State == HubConnectionState.Disconnected)
        {
            Snackbar.Add("Code: BuggyCorgie. Bitte Lade die Seite neu!", Severity.Error);
            return;
        }

        await _hubConnection.InvokeAsync("SendTaskUpdate", task.Id);
    }

    private async Task UpdateTaskFromHub()
    {
        _loading = true;
        StateHasChanged();
        
        _data = await BugTrackerProxy.GetAllAsync();

        _loading = false;
        StateHasChanged();
    }

    private async Task AddTask(BugTrackerStatusEnum status)
    {
        if (!isAuthenticated) return;
        
        List<InputOptionModel> statusSelect =
        [
            new(BugTrackerStatusEnum.Created.ToString(), BugTrackerStatusEnum.Created.ToString()),
        ];

        if (hasScpAccess)
        {
            statusSelect.Add(new(BugTrackerStatusEnum.WorkInProgress.ToString(), BugTrackerStatusEnum.WorkInProgress.ToString()));
        }
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "Titel",
                string.Empty,
                "Kuhler Titel"
            ),
            new(
                InputTypes.Text,
                "Beschreibung",
                string.Empty,
                "Kuhle Beschreibung",
                7
            ),
            new(
                InputTypes.Select,
                "Kategorie",
                BugTrackerCategoryEnum.Allgemein.ToString(),
                BugTrackerCategoryEnum.Allgemein.ToString(),
                [
                    new(BugTrackerCategoryEnum.Allgemein.ToString(), BugTrackerCategoryEnum.Allgemein.ToString()),
                    new(BugTrackerCategoryEnum.Modding.ToString(), BugTrackerCategoryEnum.Modding.ToString()),
                    new(BugTrackerCategoryEnum.Performance.ToString(), BugTrackerCategoryEnum.Performance.ToString()),
                    new(BugTrackerCategoryEnum.Funktion.ToString(), BugTrackerCategoryEnum.Funktion.ToString())
                ]
            ),
            new(
                InputTypes.Select,
                "Priorität",
                BugTrackerPriorityEnum.Normal.ToString(),
                BugTrackerPriorityEnum.Normal.ToString(),
                [
                    new(BugTrackerPriorityEnum.Low.ToString(), BugTrackerPriorityEnum.Low.ToString()),
                    new(BugTrackerPriorityEnum.Normal.ToString(), BugTrackerPriorityEnum.Normal.ToString()),
                    new(BugTrackerPriorityEnum.Important.ToString(), BugTrackerPriorityEnum.Important.ToString()),
                    new(BugTrackerPriorityEnum.Critical.ToString(), BugTrackerPriorityEnum.Critical.ToString())
                ]
            ),
            new(
                InputTypes.Select,
                "Status",
                status.ToString(),
                BugTrackerStatusEnum.Created.ToString(),
                statusSelect
            ),
        };

        var dialogData = await DialogService.OpenDialog(
            "Bug melden",
            "Was benötigen wir von dir?\n- Eine detaillierte Beschreibung des Bugs\n- Wenn vorhanden ein Screenshot / Video",
            "Bug melden",
            inputs);
        if (dialogData is null) return;

        var (validatedTitle, parsedTitle) = dialogData[0].ValidateInput<string>();
        if (!validatedTitle)
        {
            Snackbar.Add("Du hast keinen validen Titel eingegeben!", Severity.Error);
            return;
        }

        var (validatedDescription, parsedDescription) = dialogData[1].ValidateInput<string>();
        if (!validatedDescription)
        {
            Snackbar.Add("Du hast keine valide Beschreibung eingegeben!", Severity.Error);
            return;
        }

        var (validatedCategory, parsedCategory) = dialogData[2].ValidateInput<BugTrackerCategoryEnum>();
        if (!validatedCategory)
        {
            Snackbar.Add("Du hast keine valide Kategorie eingegeben!", Severity.Error);
            return;
        }

        var (validatedPriority, parsedPriority) = dialogData[3].ValidateInput<BugTrackerPriorityEnum>();
        if (!validatedPriority)
        {
            Snackbar.Add("Du hast keine valide Priorität eingegeben!", Severity.Error);
            return;
        }

        var (validatedStatus, parsedStatus) = dialogData[4].ValidateInput<BugTrackerStatusEnum>();
        if (!validatedStatus)
        {
            Snackbar.Add("Du hast keinen validen Status eingegeben!", Severity.Error);
            return;
        }
        
        LoadingService.StartLoading();
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var discordId = UserAccessService.GetDiscordUserId(authState.User)!;
        var discordName = UserAccessService.GetDiscordUserName(authState.User)!;

        var task = new BugTrackerTaskItemDbModel(parsedTitle!, parsedDescription!, discordId, discordName, parsedCategory, parsedPriority, parsedStatus);

        var added = await BugTrackerProxy.AddAsync(task);
        if (!added)
        {
            Snackbar.Add("Ein Fehler ist aufgetreten. Der Bug konnte nicht gemeldet werden.", Severity.Error);
            LoadingService.StopLoading();
            return;
        }
        LoadingService.StopLoading();

        await AddTask(task);
    }

    private async Task OpenItemDialog(BugTrackerTaskItemDbModel item)
    {
        LoadingService.StartLoading();

        var task = await BugTrackerProxy.GetByIdAsync(item.Id);
        
        var parameters = new DialogParameters<BugTrackerTaskDetailsDialog>()
        {
            { x => x.TaskItem, task },
            { x => x.Authenticated, await IsAuthenticated() },
            { x => x.CanEdit, true }
        };
        
        LoadingService.StopLoading();

        await DialogService.ShowAsync<BugTrackerTaskDetailsDialog>("Bugticketdetails", parameters, new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Medium });
    }

    private async Task<bool> IsAuthenticated()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return UserAccessService.HasClaims(authState.User);
    }
    
    private async Task<bool> HasScpAccess()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!UserAccessService.HasClaims(authState.User)) return false;
        
        var discordId = UserAccessService.GetDiscordUserId(authState.User);

        var access = await AccessProxy.GetAsync(discordId!);
        if (access is null) return false;
        if (access.Rank <= RankEnum.None) return false;

        return true;
    }
}