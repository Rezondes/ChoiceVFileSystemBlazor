@inject UserAccessService UserAccessService

@implements IDisposable

<CascadingAuthenticationState>
    <CascadingValue Value="@UserAccessService">
        <Router AppAssembly="@typeof(Program).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@code {
    private static Routes? _instance;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await UserAccessService.InitializeUserAsync(authState.User);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _instance = this;
        await JS.InvokeVoidAsync("initializeCustomReload");
    }
    
    [JSInvokable]
    public static async Task CustomReload()
    {
        if (_instance != null)
        {
            await _instance.Reload();
        }
    }
    
    private async Task Reload()
    {
        if (ReloadService is null) return;
        await ReloadService.TriggerCustomReload();
    }
    
    public void Dispose()
    {
        Console.WriteLine("Disposed");
    }
}