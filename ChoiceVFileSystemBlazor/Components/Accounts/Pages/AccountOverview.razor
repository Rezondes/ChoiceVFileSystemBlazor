@page "/accounts"

@implements IDisposable

@code {
    public const string Url = "/accounts";
    public static string GetRedirectUrl() => Url;
}

<PageTitle>Account Übersicht</PageTitle>

@if (_loading || !_isAuthorized || _shouldRedirect)
{
    <PageLoading/>
}
else
{
    <MudDataGrid 
        T="AccountApiModel" MultiSelection="true" 
        Items="@_accounts" SortMode="SortMode.Multiple" Filterable="true" 
        QuickFilter="@QuickFilter" RowClick="@RowClicked"
        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="75vh">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Account Übersicht</MudText>
            <MudSpacer />
            
            @if (UserAccessService.HasRight(RightEnum.ExportAccountsExcel))
            {
                <MudTooltip Text="Excel export" Duration="@Constants.TOOLTIP_DURATION">
                    <MudIconButton Color="Color.Secondary" Icon="@Icons.Custom.FileFormats.FileExcel" OnClick="() => ExportExcel()"/>
                </MudTooltip>
            }
            
            <MudTextField 
                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER" 
                Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" 
                IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.SocialClubName" Title="SocialClubName" />
            <PropertyColumn Property="x => x.DiscordId" Title="DiscordId" />
            <PropertyColumn Property="x => x.State" Title="State" />
            <PropertyColumn Property="x => x.HasLightmodeFlag" Title="Lightmode aktiv" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AccountApiModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;
    
    private string? _searchString;
    
    private List<AccountApiModel> _accounts = [];
   
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = await UserAccessService.HasRightAsync(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        await Load();
    
        ReloadService.OnCustomReload += Load;
    }
    
    public void Dispose()
    {
        ReloadService.OnCustomReload -= Load;
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            var response = await AccountApi.GetAllAsync();
            if (response.IsSuccessStatusCode)
            {
                _accounts = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
        
        StateHasChanged();
    }
    
    private Func<AccountApiModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Name != null && x.Name.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.SocialClubName != null && x.SocialClubName.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.DiscordId != null && x.DiscordId.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.State != null && x.State.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(_searchString))
            return true;

        return false;
    };
    
    void RowClicked(DataGridRowClickEventArgs<AccountApiModel> args)
    {
        Navigation.NavigateTo(AccountView.GetRedirectUrl(args.Item.Id.ToString()));
    }

    private async Task ExportExcel()
    {
        if (!_accounts.Any()) return;

        var user = await UserAccessService.GetUserAccess();
        
        var name = $"choiceV_accounts_{DateTime.UtcNow.ConvertTimeFromUtcWithTimeZone(user.Settings.TimeZone)}";
        
        var result = await DialogService.ShowMessageBox(
            "Excel export", 
            $"Möchtest du die Account Übersicht als XLSX-Datei mit dem Namen \"{name}\" exportieren?", 
            yesText:"Exportieren", cancelText:"Abbrechen"
        );

        if (result is null or false) return;
        
        await ExportHelper.ExportToExcelAsync(_accounts, name, JS);
    }
}