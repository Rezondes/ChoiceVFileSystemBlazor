@page "/accounts/view/{id}"

@code {
    public const string Url = "/accounts/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<PageTitle>Account Ansicht</PageTitle>

@if (_loading || !_isAuthorized || _shouldRedirect)
{
    <PageLoading/>
}
else if (_model is null)
{
    <ErrorComponent/>
}
else
{
    <MudItem Style="height: 75px;">
        <MudText Typo="Typo.h3">[@_model.Id] @_model.Name</MudText>
    </MudItem>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="5" >
            <MudPaper Height="240px">
                <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                    <MudIcon Icon="@Icons.Material.Filled.Info"/>
                    <MudText Class="px-5" Typo="Typo.h5">Informationen</MudText>
                </div>
                <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                    <MudText>Spieler-Id: @_model.Id</MudText>
                    <MudText>SocialClubName: @_model.SocialClubName</MudText>
                    <MudText>DiscordId: @_model.DiscordId</MudText>
                    <MudText>LastLogin: @_model.LastLogin</MudText>
                    <MudText>State: @_model.State</MudText>
                    <MudText>StateReason: @_model.StateReason</MudText>
                </MudContainer>
            </MudPaper>
        </MudItem>

        <MudItem xs="7">
            <MudPaper Height="140px">
                <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                    <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                    <MudText Class="px-5" Typo="Typo.h5">Support-Funktionen</MudText>
                </div>
                <div Class="d-flex flex-row justify-content-evenly mud-width-full py-8">
                    @if (_model.IsCurrentlyOnline)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="KickAccount">Kicken</MudButton>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Unstuck</MudButton>
                    }
                    
                    @if (_model.State == AccountStateApiEnum.Banned)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="UnbanAccount">Unban</MudButton>
                    }
                    else 
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="BanAccount">Bann</MudButton>
                    }
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                <CharacterOverviewDataGrid AccountId="_id" Height="400px" @ref="_characterOverviewDataGrid"/>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                <SupportfileOverviewDataGrid @ref="_supportfileOverviewDataGrid" AccountId="_id" Height="400px" Label="Support-Fälle"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;

    [Parameter] public string Id { get; set; }
    private int _id;
    
    private AccountApiModel? _model;
    
    private string? _searchString;
    
    private SupportfileOverviewDataGrid _supportfileOverviewDataGrid;
    private CharacterOverviewDataGrid _characterOverviewDataGrid;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = UserAccessService.HasRight(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await LoadAllAsync();
    }
    
    private bool ParseId()
    {
        if (!int.TryParse(Id, out var accountId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = accountId;
        return true;
    }

    private async Task LoadAllAsync()
    {
        _loading = true;
        StateHasChanged();

        await LoadAccountAsync();
        
        _loading = false;
        StateHasChanged();
        
        await _characterOverviewDataGrid.Load();
        await _supportfileOverviewDataGrid.Load();
    }

    private async Task LoadAccountAsync()
    {
        try
        {
            var response = await AccountApi.GetByIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _model = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private async Task KickAccount()
    {
        if (_model is null) return;
        
        var message = "Du wurdest gekickt!";
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "Nachricht",
                string.Empty,
                message
            ),
        };

        var dialogData = await DialogService.OpenDialog(
            "Spieler bannen", 
            "Bist du dir sicher, dass du diesen Spieler bannen willst?", 
            "Spieler bannen",
            inputs);
        if (dialogData is null) return;

        var (validated, parsedMessage) = dialogData[0].ValidateInput<string>();
        if (validated)
        {
            message = parsedMessage;
        }
        
        var response = await AccountApi.KickAccountByAccountIdAsync(_model.Id, message!);
        if (!response.IsSuccessStatusCode)
        {
            if (response.Error.Content == "AuthErrorMessage")
            {
                Snackbar.Add("Du hast kein Recht dazu das zu machen!", Severity.Error);
                return;
            }
            
            Snackbar.Add(response.Error.Message, Severity.Error);
            return;
        }
        
        Snackbar.Add("Account wurde gekickt!", Severity.Success);
        await LoadAllAsync();
    }

    private async Task UnbanAccount()
    {
        if (_model is null) return;
        
        var result = await DialogService.ShowMessageBox(
            "Spieler entbannen", 
            "Bist du dir sicher, dass du diesen Spieler entbannen willst?", 
            yesText:"Spieler entbannen!", cancelText:"Abbrechen"
        );

        if (result is null or false) return;
        
        var response = await AccountApi.UnbanAccountByAccountIdAsync(_model.Id);
        if (!response.IsSuccessStatusCode)
        {
            if (response.Error.Content == "AuthErrorMessage")
            {
                Snackbar.Add("Du hast kein Recht dazu das zu machen!", Severity.Error);
                return;
            }
            
            Snackbar.Add(response.Error.Message, Severity.Error);
            return;
        }
        
        Snackbar.Add("Account wurde entbannt!", Severity.Success);
        await LoadAllAsync();
    }

    private async Task BanAccount()
    {
        if (_model is null) return;
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "Nachricht",
                string.Empty,
                "Du bist gebannt!"
            ),
        };

        var dialogData = await DialogService.OpenDialog(
            "Spieler bannen", 
            "Bist du dir sicher, dass du diesen Spieler bannen willst?", 
            "Spieler bannen",
            inputs);
        if (dialogData is null) return;

        var message = "Du bist gebannt!";
        var (validated, parsedMessage) = dialogData[0].ValidateInput<string>();
        if (validated)
        {
            message = parsedMessage;
        }
        
        var response = await AccountApi.BanAccountByAccountIdAsync(_model.Id, message!);
        if (!response.IsSuccessStatusCode)
        {
            if (response.Error.Content == "AuthErrorMessage")
            {
                Snackbar.Add("Du hast kein Recht dazu das zu machen!", Severity.Error);
                return;
            }
            
            Snackbar.Add(response.Error.Message, Severity.Error);
            return;
        }
        
        Snackbar.Add("Account wurde gebannt!", Severity.Success);
        await LoadAllAsync();
    }
}