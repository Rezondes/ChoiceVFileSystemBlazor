@page "/accounts/view/{id}"

@code {
    public const string Url = "/accounts/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<PageTitle>Account Ansicht</PageTitle>

@if (_loading || !_isAuthorized || _shouldRedirect)
{
    <PageLoading/>
}
else if (_characters is null || _model is null)
{
    <PageLoading/>
}
else
{
    <MudContainer Class="px-8" MaxWidth="MaxWidth.False"  style="height: 100%; overflow-y: auto; padding: 16px 0;">
        <MudItem Style="height: 75px;">
            <MudText Typo="Typo.h3">@_model.Name</MudText>
        </MudItem>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="5" >
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper>
                            <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                                <MudIcon Icon="@Icons.Material.Filled.Info"/>
                                <MudText Class="px-5" Typo="Typo.h5">Spielerinformationen</MudText>
                            </div>
                            <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                                <MudText>Spieler-Id: @_model.Id</MudText>
                                <MudText>SocialClubName: @_model.SocialClubName</MudText>
                                <MudText>DiscordId: @_model.DiscordId</MudText>
                                <MudText>LastLogin: @_model.LastLogin</MudText>
                                <MudText>State: @_model.State</MudText>
                                <MudText>StateReason: @_model.StateReason</MudText>
                            </MudContainer>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                            <MudDataGrid
                                T="CharacterApiModel" MultiSelection="true"
                                Items="@_characters" SortMode="SortMode.Multiple" Filterable="true"
                                QuickFilter="@QuickFilter" RowClick="@RowClicked"
                                Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="300px" Class="mud-width-full">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Charaktere</MudText>
                                    <MudSpacer />
                                    <MudTextField
                                        T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                                        Adornment="Adornment.Start" Immediate="true"
                                        AdornmentIcon="@Icons.Material.Filled.Search"
                                        IconSize="Size.Medium" Class="mt-0"/>
                                </ToolBarContent>
                                <Columns>
                                    <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
                                    <PropertyColumn Property="x => x.FirstName" Title="Vorname" />
                                    <PropertyColumn Property="x => x.MiddleName" Title="Mittelnamen" />
                                    <PropertyColumn Property="x => x.LastName" Title="Nachname" />
                                    <PropertyColumn Property="x => x.Dimension" Title="Dimension" />
                                </Columns>
                                <PagerContent>
                                    <MudDataGridPager T="CharacterApiModel" />
                                </PagerContent>
                            </MudDataGrid>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem xs="7">
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Height="140px">
                            <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                                <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                                <MudText Class="px-5" Typo="Typo.h5">Support-Funktionen</MudText>
                            </div>
                            <div Class="d-flex flex-row justify-content-evenly mud-width-full py-8">
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Timeout/Bann</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Kicken</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Whitelisting</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Disabled>Unstuck</MudButton>
                            </div>
                        </MudPaper>

                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                            <SupportfileOverviewDataGrid @ref="_supportfileOverviewDataGrid" AccountId="_id" Height="400px" Label="Support-Fälle"/>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;

    [Parameter] public string Id { get; set; }
    private int _id;
    
    private AccountApiModel? _model;
    
    private List<CharacterApiModel>? _characters;
    private string? _searchString;
    
    private SupportfileOverviewDataGrid _supportfileOverviewDataGrid;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = UserAccessService.HasRight(RightEnum.ViewAccounts);
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await LoadAllAsync();
        await _supportfileOverviewDataGrid.Load();
    }
    
    private bool ParseId()
    {
        if (!int.TryParse(Id, out var accountId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = accountId;
        return true;
    }

    private async Task LoadAllAsync()
    {
        _loading = true;
        StateHasChanged();

        await LoadCharacterAsync();
        await LoadCharactersAsync();
        
        _loading = false;
        StateHasChanged();
    }

    private async Task LoadCharacterAsync()
    {
        try
        {
            var response = await AccountApi.GetByIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _model = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task LoadCharactersAsync()
    {
        try
        {
            var response = await CharacterApi.GetByAccountIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _characters = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private Func<CharacterApiModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.FirstName != null && x.FirstName.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName != null && x.LastName.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.MiddleName != null && x.MiddleName.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.AccountId != null && x.AccountId.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(_searchString))
            return true;

        return false;
    };
    
    void RowClicked(DataGridRowClickEventArgs<CharacterApiModel> args)
    {
        Navigation.NavigateTo(CharacterView.GetRedirectUrl(args.Item.Id.ToString()));
    }
}