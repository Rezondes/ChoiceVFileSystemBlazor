@if (_loading)
{
    <LoadingComponent/>
}
else if (!_loading && _supportfiles is null)
{
    <ErrorComponent/>
}
else
{
    <MudDataGrid
        T="FileDbModel" MultiSelection="true"
        Items="@_supportfiles" SortMode="SortMode.Multiple" Filterable="true"
        QuickFilter="@QuickFilter" RowClick="@RowClicked" Style="width: 100%;" 
        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="@(Height is null ? "75vh" : Height)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@(Label ?? "Supportakten Übersicht")</MudText>
            <MudSpacer />

            @if (UserAccessService.HasRight(RightEnum.ViewDeletedFiles))
            {
                if (_showDeletedFiles)
                {
                    <MudTooltip Text="Gelöschte Akten ausblenden" Duration="@Constants.TOOLTIP_DURATION">
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" OnClick="() => ToggleShowDeletedFiles()"/>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Gelöschte Akten anzeigen" Duration="@Constants.TOOLTIP_DURATION">
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Outlined.Delete" OnClick="() => ToggleShowDeletedFiles()"/>
                    </MudTooltip>
                }
            }

            <MudTextField
                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
            <PropertyColumn Property="x => x.Title" Title="Titel" />
            <PropertyColumn Property="x => x.CreatorAccessModel.Name" Title="Ersteller"/>
            <PropertyColumn Property="x => x.CreatorAccessModel.Id" Title="ErstellerId"/>
            <PropertyColumn Property="x => x.Status.GetDisplayText()" Title="Status" />
            <PropertyColumn Property="x => x.MinRank.GetDisplayText()" Title="MinRank" />
            <TemplateColumn Hideable="false" Sortable="true" Filterable="true" Title="Kategorie">
                <CellTemplate>
                @if (context.Item.Category is null)
                {
                    <span>Keine Kategorie</span>
                }
                else
                {
                    <span>[@context.Item.Category.Number] @context.Item.Category.Name</span>
                }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Hideable="false" Sortable="true" Filterable="true" Title="Datum">
                <CellTemplate>
                    @context.Item.CreatedAtLocal(UserAccessService.GetUserAccess().Result.Settings.TimeZone)
                </CellTemplate>
            </TemplateColumn>
            @if (UserAccessService.HasRight(RightEnum.ViewDeletedFiles))
            {
                <PropertyColumn Property="x => x.Deleted" Title="Gelöscht" />
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="FileDbModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {  
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    [Parameter] public Ulid? AccessId { get; set; }
    [Parameter] public int? AccountId { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Height { get; set; }
    
    private bool _loading = true;
    private string? _searchString;
    private HubConnection? _hubConnection;

    private bool _showDeletedFiles = false;
    
    private List<FileDbModel>? _supportfiles = [];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
            
        await StartHubConnection();
    }

    private async Task StartHubConnection()
    {
        _hubConnection = HubHelper.GetHubConnection(Navigation, SupportfileHub.HubPattern);
        
        _hubConnection.On(SupportfileHubMethodEnum.EntryCreated.ToString(), async () =>
        {
            await InvokeAsync(Load);
        });

        _hubConnection.On<Ulid>(SupportfileHubMethodEnum.ToggleFileDeleted.ToString(), async (id) =>
        {
            await InvokeAsync(Load);
        });
        
        await _hubConnection.StartAsync();
    }

    public async Task Load()
    {
        var access = await UserAccessService.GetUserAccess();
        if (access is null) return;
        
        _loading = true;
        StateHasChanged();
        
        _supportfiles = null;

        List<FileDbModel> response;

        if (AccessId is not null)
        {
            response = await FileProxy.GetAllSupportfilesAsync();
            response = response.Where(x => x.CreatedByAccessId == AccessId).ToList();
        }
        else if (AccountId is not null)
        {
            response = await FileProxy.GetAllFullSupportfilesAsync();
            response = response.Where(x => x.CharacterEntrys.Any(y => y.AccountId == AccountId)).ToList();
        }
        else
        {
            response = await FileProxy.GetAllSupportfilesAsync();
        }
        
        var filteredResponse = response.Where(x => x.MinRank <= access.Rank).ToList();
        
        _supportfiles = _showDeletedFiles ? filteredResponse : filteredResponse.Where(x => !x.Deleted).ToList();
        
        _loading = false;
        StateHasChanged();
    }
    
    private Func<FileDbModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();
        
        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Title.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(lowerSearchString))
            return true;

        return false;
    };
    
    void RowClicked(DataGridRowClickEventArgs<FileDbModel> args)
    {
        Navigation.NavigateTo(SupportfileView.GetRedirectUrl(args.Item.Id.ToString()));
    }

    private async Task ToggleShowDeletedFiles()
    {
        _showDeletedFiles = !_showDeletedFiles;
        await Load();
    }
}