@page "/access/view/{id}"
@using TimeZoneConverter

@code {
    public const string Url = "/access/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

<MudGrid Justify="Justify.Center" style="height: 100%; overflow-y: auto;">
    <MudItem xs="12"> 
        <MudPaper Elevation="25" Style="padding: 20px;">
            <MudText>Id: @UserAccessService.GetUserAccess().Result.Id</MudText>
            <MudText>Name: @UserAccessService.GetUserAccess().Result.Name</MudText>
            <MudText>Rank: @UserAccessService.GetUserAccess().Result.Rank</MudText>
            <MudText>AccountId: @UserAccessService.GetUserAccess().Result.AccountId</MudText>
            <MudText>DiscordId: @UserAccessService.GetUserAccess().Result.DiscordId</MudText>
            <MudText>Zeitzone: @UserAccessService.GetUserAccess().Result.Settings.TimeZone</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OverrideName">Namen aktualisieren</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OverrideTimezone">Zeitzone aktualisieren</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <SupportfileOverviewDataGrid AccessId="@UserAccessService.GetUserAccess().Result!.Id" Label="Erstellte Supportakten" @ref="_supportfileOverviewDataGrid"/>
    </MudItem>
</MudGrid>  

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    [Parameter] public string Id { get; set; }
    private bool _shouldRedirect;

    private SupportfileOverviewDataGrid _supportfileOverviewDataGrid;
    
    private PartialAccessModel? _checkModel;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var access = await UserAccessService.GetUserAccess();
        
        _shouldRedirect = access is null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var access = await UserAccessService.GetUserAccess();
        
        if (access is null)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
        
        if (!Ulid.TryParse(Id, out var accessId))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            
            Navigation.NavigateToNotAuthorized();
            return;
        }

        if (accessId != access!.Id)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
        
        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }

        _checkModel = access.CreateShallowCopy();
        await _supportfileOverviewDataGrid.Load();
    }

    private async Task OverrideName()
    {
        var access = await UserAccessService.GetUserAccess();
        if (MainLayout.BaseHubConnection is null) return;
        if (access is null) return;
        if (_checkModel is null) return;
        
        const string title = "Namen ändern";
        const string description = "";
        const string submitButtonText = "Speichern";

        const string nameLabel = "Name";
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                nameLabel,
                access.Name,
                "John Doe"
            ),
        };

        var parameter = new DialogParameters<SimpleMudDialog>
        {
            { x => x.Description, description },
            { x => x.Inputs, inputs },
            { x => x.SubmitButtonText, submitButtonText },
        };

        var dialog = await DialogService.ShowAsync<SimpleMudDialog>(title, parameter, new DialogOptions { FullWidth = true });
        var dialogResult = await dialog.Result;

        if (dialogResult is null || dialogResult.Canceled) return;

        var data = (List<InputModel>)dialogResult.Data!;
        
        var name = data.First(x => x.Label == nameLabel).Value;
        if (string.IsNullOrEmpty(name))
        {
            Snackbar.Add("Es wurde kein Name eingetragen!", Severity.Error);
            return;
        }

        if (_checkModel.Name == name)
        {
            Snackbar.Add("Der Name wurde nicht geändert!", Severity.Error);
            return;
        }

        var partialAccessModel = new PartialAccessModel(access.AccountId, access.DiscordId, name, access.Rank);
        var response = await AccessProxy.UpdateToPartial(access, partialAccessModel, access!.Id);
        if (!response)
        {
            Snackbar.Add("Beim Aktualisieren ist ein Fehler aufgetreten oder es wurden keine andere Werte angegeben.", Severity.Error);
            return;
        }

        await MainLayout.BaseHubConnection.SendAsync(BaseHubMethodEnum.UpdateAccess.ToString(), access.Id);
        
        Snackbar.Add($"[{access.Id}] {access.Name} wurde aktualisiert.", Severity.Success);
    }

    private async Task OverrideTimezone()
    {
        var access = await UserAccessService.GetUserAccess();
        if (MainLayout.BaseHubConnection is null) return;
        if (access is null) return;
        if (_checkModel is null) return;
        
        const string title = "Zeitzone ändern";
        const string description = "";
        const string submitButtonText = "Speichern";

        const string timeZoneLabel = "Zeitzone";
        
        var timeZoneIds = TZConvert.KnownIanaTimeZoneNames
            .Where(x => DateTime.UtcNow.TryConvertTimeFromUtcWithTimeZone(x) is not null)
            .Select(x => new InputOptionModel(x, x))
            .ToList();
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Select,
                timeZoneLabel,
                access.Settings.TimeZone,
                string.Empty,
                timeZoneIds
            ),
        };

        var parameter = new DialogParameters<SimpleMudDialog>
        {
            { x => x.Description, description },
            { x => x.Inputs, inputs },
            { x => x.SubmitButtonText, submitButtonText },
        };

        var dialog = await DialogService.ShowAsync<SimpleMudDialog>(title, parameter, new DialogOptions { FullWidth = true });
        var dialogResult = await dialog.Result;

        if (dialogResult is null || dialogResult.Canceled) return;

        var data = (List<InputModel>)dialogResult.Data!;
        
        var timeZone = data.First(x => x.Label == timeZoneLabel).Value;
        if (string.IsNullOrEmpty(timeZone))
        {
            Snackbar.Add("Es wurde kein Zeitzone ausgewählt!", Severity.Error);
            return;
        }
        
        var response = await AccessProxy.UpdateTimeZoneAsync(access.Id, timeZone, access.Id);
        if (!response)
        {
            Snackbar.Add("Beim Aktualisieren ist ein Fehler aufgetreten oder es wurden keine andere Werte angegeben.", Severity.Error);
            return;
        }

        await MainLayout.BaseHubConnection.SendAsync(BaseHubMethodEnum.UpdateAccess.ToString(), access.Id);
        
        Snackbar.Add($"[{access.Id}] {access.Name} wurde aktualisiert.", Severity.Success);
    }

}