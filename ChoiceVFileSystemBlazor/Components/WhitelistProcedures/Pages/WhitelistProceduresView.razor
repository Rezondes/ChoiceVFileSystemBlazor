@page "/whitelist/procedures/view/{id}"

@implements IDisposable

@code {
    public const string Url = "/whitelist/procedures/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

@if (_loading)
{
    <PageLoading/>
}
else if (!_loading && _model is null)
{
    <ErrorComponent/>
}
else if (_model is null)
{
    <ErrorComponent/>
}
else
{
    <MudItem Style="height: 75px;">
        <MudText Typo="Typo.h3">[@_model.Id] @_model.UserId | @_model.ChannelId</MudText>
    </MudItem>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="5" >
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Height="495px">
                        <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                            <MudIcon Icon="@Icons.Material.Filled.Info"/>
                            <MudText Class="px-5" Typo="Typo.h5">Informationen</MudText>
                        </div>
                        <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                            <MudText>UserId: @_model.UserId</MudText>
                            <MudText>ChannelId: @_model.ChannelId</MudText>
                            <MudText>CurrentStep: @_model.CurrentStep</MudText>
                            <MudText>Blocked: @_model.Blocked</MudText>
                            <MudText>NotCancelable: @_model.NotCanceable</MudText>
                            <MudText>StartTime: @_model.StartTime</MudText>
                            <MudText>CancelStartTime: @_model.CancelStartTime</MudText>
                        </MudContainer>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="7">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Height="140px">
                        <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                            <MudIcon Icon="@Icons.Material.Filled.AdsClick"/>
                            <MudText Class="px-5" Typo="Typo.h5">Funktionen</MudText>
                        </div>
                        <div Class="d-flex flex-row justify-content-evenly mud-width-full py-8">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="OnClickAddAccount">
                                Spieler whitelisten
                            </MudButton>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Height="495px">
                <div class="d-flex flex-row align-items-center px-5 mud-width-full">
                    <MudIcon Icon="@Icons.Material.Filled.Info"/>
                    <MudText Class="px-5" Typo="Typo.h5">Weitere Informationen</MudText>
                </div>
                <MudContainer Class="d-flex flex-column justify-center mud-width-full py-8">
                    <MudText>CHAR_NAME: @(_model.DataList.FirstOrDefault(x => x.Name == "CHAR_NAME")?.Data ?? "Keine Daten")</MudText>
                    <MudText>CHAR_AGE: @(_model.DataList.FirstOrDefault(x => x.Name == "CHAR_AGE")?.Data ?? "Keine Daten")</MudText>
                    <MudText>CHAR_PROFESSION: @(_model.DataList.FirstOrDefault(x => x.Name == "CHAR_PROFESSION")?.Data ?? "Keine Daten")</MudText>
                    <MudText>SOCIALCLUB: @(_model.DataList.FirstOrDefault(x => x.Name == "SOCIALCLUB")?.Data ?? "Keine Daten")</MudText>
                    <MudText>TEAMSPEAK_ID: @(_model.DataList.FirstOrDefault(x => x.Name == "TEAMSPEAK_ID")?.Data ?? "Keine Daten")</MudText>
                    <MudText>CHAR_HISTORY: @(_model.DataList.FirstOrDefault(x => x.Name == "CHAR_HISTORY")?.Data ?? "Keine Daten")</MudText>
                </MudContainer>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                <MudDataGrid
                    T="WhitelistQuestionsTestApiModel" MultiSelection="true"
                    Items="@_model.TestList" SortMode="SortMode.Multiple" Filterable="true"
                    QuickFilter="@TestQuickFilter" RowClick="@TestRowClicked" Style="width: 100%;"
                    Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="400px">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Tests</MudText>
                        <MudSpacer />
                        <MudTextField
                            T="string" @bind-Value="_testSearchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                            Adornment="Adornment.Start" Immediate="true"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
                        <PropertyColumn Property="x => x.WrongQuestions" Title="WrongQuestions" />
                        <PropertyColumn Property="x => x.RightQuestions" Title="RightQuestions" />
                        <PropertyColumn Property="x => x.Finished" Title="Finished" />
                        <PropertyColumn Property="x => x.QuestionAnswers.Count" Title="QuestionAnswers Count" />
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="WhitelistQuestionsTestApiModel" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                <MudDataGrid
                    T="WhitelistProceduresLogApiModel" MultiSelection="true"
                    Items="@_model.LogList" SortMode="SortMode.Multiple" Filterable="true"
                    QuickFilter="@LogsQuickFilter" Style="width: 100%;"
                    Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="400px">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Logs</MudText>
                        <MudSpacer />
                        <MudTextField
                            T="string" @bind-Value="_logsSearchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                            Adornment="Adornment.Start" Immediate="true"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="#" Filterable="false" />
                        <PropertyColumn Property="x => x.Step" Title="Step" />
                        <PropertyColumn Property="x => x.Title" Title="Title" />
                        <PropertyColumn Property="x => x.Message" Title="Message" />
                        <PropertyColumn Property="x => x.Date" Title="Date" />
                        <PropertyColumn Property="x => x.Level" Title="Level" />
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="WhitelistProceduresLogApiModel" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;
    
    [Parameter] public string Id { get; set; }
    private int _id;
    
    private WhitelistProcedureApiModel? _model;

    private string? _logsSearchString;
    private string? _testSearchString;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = await UserAccessService.HasRightAsync(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
        
        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await Load();
    
        ReloadService.OnCustomReload += Load;
    }
    
    public void Dispose()
    {
        ReloadService.OnCustomReload -= Load;
    }

    private bool ParseId()
    {
        if (!int.TryParse(Id, out var id))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = id;
        return true;
    }
    
    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var response = await WhitelistProcedureApi.GetByProcedureIdAsync(_id);
            if (response.IsSuccessStatusCode)
            {
                _model = response.Content;
            }
            else
            {
                Snackbar.Add(response.Error.Message, Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(Constants.API_ERROR_NOT_AVAILABLE, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
        
        StateHasChanged();
    }
    
    private Func<WhitelistProceduresLogApiModel, bool> LogsQuickFilter => x =>
    {
        if (_logsSearchString == null) return true;
        
        var lowerSearchString = _logsSearchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Step.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Title.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Message.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Date.ToString(CultureInfo.CurrentCulture).ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(_logsSearchString))
            return true;

        return false;
    };
    
    private Func<WhitelistQuestionsTestApiModel, bool> TestQuickFilter => x =>
    {
        if (_testSearchString == null) return true;
        
        var lowerSearchString = _testSearchString.ToLower();

        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.WrongQuestions.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.RightQuestions.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Finished.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.QuestionAnswers.Count.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(_testSearchString))
            return true;

        return false;
    };
    
    private async Task TestRowClicked(DataGridRowClickEventArgs<WhitelistQuestionsTestApiModel> args)
    {
        var item = args.Item;

        var parameter = new DialogParameters<WhitelistQuestionTestDialog>
        {
            { x => x.Model, item },
        };

        await DialogService.ShowAsync<WhitelistQuestionTestDialog>(string.Empty, parameter, new DialogOptions { FullWidth = true });
    }
    
    private async Task OnClickAddAccount()
    {
        var discordId = string.Empty;
        var socialClubName = string.Empty;

        if (_model is not null)
        {
            discordId = _model.UserId.ToString();
            socialClubName = _model.DataList.FirstOrDefault(x => x.Name == "SOCIALCLUB")?.Data ?? string.Empty;
        }
        
        var added = await AccountHelper.OpenAddAccountDialog(
            DiscordService,
            DialogService, 
            Snackbar, 
            AccountApi, 
            socialClubName, 
            discordId
        );
        if (!added) return;
        await Load();
    }
}