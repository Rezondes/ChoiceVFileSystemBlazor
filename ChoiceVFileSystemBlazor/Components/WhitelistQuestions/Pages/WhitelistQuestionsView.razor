@page "/whitelist/questions/view/{id}"

@implements IDisposable

@code {
    public const string Url = "/whitelist/questions/view/";
    public static string GetRedirectUrl(string id) => Url + id;
}

@if (_loading)
{
    <PageLoading/>
}
else if (!_loading && _model is null)
{
    <ErrorComponent/>
}
else if (_model is null)
{
    <ErrorComponent/>
}
else
{
    <style>
        .divider-class{
            margin: 10px 0; 
            opacity: 0;
        }
    </style>
    
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full">
                <MudDivider Class="divider-class"/>
                <MudText Typo="Typo.h5">Frage:</MudText>
                <MudText>
                    @_model.Question
                </MudText>
                <MudDivider Class="divider-class"/>

                @if (_model.Answer1 is not null)
                {
                    <MudText Typo="Typo.h5">Anwortmöglichkeit 1 (@(_model.Answer1.IsCorrect ? "richtig" : "falsch")):</MudText>
                    <MudText>
                        @_model.Answer1.Text
                    </MudText>
                    <MudDivider Class="divider-class"/>
                }
                @if (_model.Answer2 is not null)
                {
                    <MudText Typo="Typo.h5">Anwortmöglichkeit 2 (@(_model.Answer2.IsCorrect ? "richtig" : "falsch")):</MudText>
                    <MudText>
                        @_model.Answer2.Text
                    </MudText>
                    <MudDivider Class="divider-class"/>
                }
                @if (_model.Answer3 is not null)
                {
                    <MudText Typo="Typo.h5">Anwortmöglichkeit 3 (@(_model.Answer3.IsCorrect ? "richtig" : "falsch")):</MudText>
                    <MudText>
                        @_model.Answer3.Text
                    </MudText>
                    <MudDivider Class="divider-class"/>
                }
                @if (_model.Answer4 is not null)
                {
                    <MudText Typo="Typo.h5">Anwortmöglichkeit 4 (@(_model.Answer4.IsCorrect ? "richtig" : "falsch")):</MudText>
                    <MudText>
                        @_model.Answer4.Text
                    </MudText>
                    <MudDivider Class="divider-class"/>
                }
                @if (_model.Answer5 is not null)
                {
                    <MudText Typo="Typo.h5">Anwortmöglichkeit 5 (@(_model.Answer5.IsCorrect ? "richtig" : "falsch")):</MudText>
                    <MudText>
                        @_model.Answer5.Text
                    </MudText>
                    <MudDivider Class="divider-class"/>
                }
                
                <MudText Typo="Typo.h5">Erklärung:</MudText>
                <MudText>
                    @_model.Explanation
                </MudText>
                <MudDivider Class="divider-class"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;
    
    [Parameter] public string Id { get; set; }
    private uint _id;
    
    private WhitelistQuestionApiModel? _model;
    
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isAuthorized = await UserAccessService.HasRightAsync(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
        
        var parsingSuccess = ParseId();
        if (!parsingSuccess)
        {
            Navigation.NavigateToError();
            return;
        }

        await Load();
    
        ReloadService.OnCustomReload += Load;
    }
    
    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
        
        ReloadService.OnCustomReload -= Load;
    }

    private bool ParseId()
    {
        if (!uint.TryParse(Id, out var id))
        {
            Snackbar.Add("Parsing failed", Severity.Error);
            _loading = false;
            return false;
        }

        _id = id;
        return true;
    }
    
    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        var result = await WhitelistQuestionApi.HandleApiRequestAsync(
            async token => await WhitelistQuestionApi.GetByQuestionIdAsync(_id, token),
            _cancellationTokenSource.Token);
        
        if (result.IsSuccess)
        {
            _model = result.Data!;
        }
        else
        {
            Snackbar.Add(result.Error?.Message ?? "Unknown error", Severity.Error);
        }
        
        _loading = false;
        StateHasChanged();
    }
}