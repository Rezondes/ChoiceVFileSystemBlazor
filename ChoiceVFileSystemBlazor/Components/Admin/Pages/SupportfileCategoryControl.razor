@page "/admin/supportfiles/categories"

@implements IDisposable

@code {
    public const string Url = "/admin/supportfiles/categories";
    public static string GetRedirectUrl() => Url;
}

<PageTitle>NewsControl</PageTitle>

@if (_loading || !_isAuthorized || _shouldRedirect)
{
    <PageLoading/>
}
else
{
    <MudDataGrid
        T="SupportfileCategoryDbModel" MultiSelection="true"
        Items="@_data" SortMode="SortMode.Multiple" Filterable="true"
        QuickFilter="@QuickFilter"
        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="75vh">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Supportakten Kategorien Übersicht</MudText>
            <MudSpacer />

            @if (UserAccessService.HasRight(RightEnum.SupportfileCategoryCreate))
            {
                <MudTooltip Text="Kategorie hinzufügen" Duration="@Constants.TOOLTIP_DURATION">
                    <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="() => CreateEntry()"/>
                </MudTooltip>
            }

            <MudTextField
                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Hideable="false" Property="x => x.Id" Title="#" Filterable="false"/>
            <PropertyColumn Hideable="false" Property="x => x.Name" Title="Title" />
            <PropertyColumn Hideable="false" Property="x => x.Nummer" Title="Content" />
            @if (UserAccessService.HasRight(RightEnum.SupportfileCategoryEdit) || UserAccessService.HasRight(RightEnum.SupportfileCategoryDelete))
            {
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        @if (UserAccessService.HasRight(RightEnum.SupportfileCategoryEdit))
                        {
                        <MudTooltip Text="Bearbeiten" Duration="@Constants.TOOLTIP_DURATION">
                            <MudIconButton
                                Size="@Size.Small"
                                Variant="@Variant.Filled"
                                Icon="@Icons.Material.Filled.Edit"
                                Color="@Color.Primary"
                                OnClick="() => EditEntry(context.Item)"/>
                        </MudTooltip>
                        }
                        @if (UserAccessService.HasRight(RightEnum.SupportfileCategoryDelete))
                        {
                        <MudTooltip Text="Löschen" Duration="@Constants.TOOLTIP_DURATION">
                            <MudIconButton
                                Size="@Size.Small"
                                Variant="@Variant.Filled"
                                Icon="@Icons.Material.Filled.DeleteForever"
                                Color="@Color.Error"
                                OnClick="() => DeleteEntry(context.Item)"/>
                        </MudTooltip>
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="SupportfileCategoryDbModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading;
    private string? _searchString;

    private List<SupportfileCategoryDbModel> _data = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _isAuthorized = await UserAccessService.HasRightAsync(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
            
        await Load();
    
        ReloadService.OnCustomReload += Load;
    }
    
    public void Dispose()
    {
        ReloadService.OnCustomReload -= Load;
    }
    
    private async Task Load()
    {
        if (_loading) return;
        
        _loading = true;
        StateHasChanged();

        _data = await SupportfileCategoryProxy.GetAllAsync();
        
        _loading = false;
        StateHasChanged();
    }
    
    private Func<SupportfileCategoryDbModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();
        
        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Name.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Nummer.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(lowerSearchString))
            return true;

        return false;
    };

    private async Task CreateEntry()
    {
        var access = await UserAccessService.GetUserAccess();
        if (access is null) return;
        if (!UserAccessService.HasRight(RightEnum.SupportfileCategoryCreate)) return;
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "Name",
                string.Empty,
                "Super kuhle Kategorie"
            ),
            new(
                InputTypes.Number,
                "Nummer",
                string.Empty,
                "187"
            ),
        };

        var dialogData = await DialogService.OpenDialog(
            "Kategorie hinzufügen", 
            "Welche Kategorie willst du hinzufügen?", 
            "Kategorie hinzufügen",
            inputs);
        if (dialogData is null) return;

        var (validatedName, parsedName) = dialogData[0].ValidateInput<string>();
        if (!validatedName)
        {
            Snackbar.Add("Es wurde kein Name eingetragen!", Severity.Error);
            return;
        }
        
        var (validatedNumber, parsedNumber) = dialogData[1].ValidateInput<int>();
        if (!validatedNumber)
        {
            Snackbar.Add("Es wurde keine Nummer eingetragen!", Severity.Error);
            return;
        }

        var category = new SupportfileCategoryDbModel(parsedName!, parsedNumber);

        var response = await SupportfileCategoryProxy.AddAsync(category);
        if (response is null)
        {
            Snackbar.Add("Kategorie konnte nicht hinzugefügt werden!", Severity.Error);
            return;
        }

        Snackbar.Add("Kategorie wurde hinzugefügt!", Severity.Success);
        await Load();
    }

    private async Task EditEntry(SupportfileCategoryDbModel category)
    {
        var access = await UserAccessService.GetUserAccess();
        if (access is null) return;
        if (!UserAccessService.HasRight(RightEnum.SupportfileCategoryEdit)) return;
        
        var inputs = new List<InputModel>
        {
            new(
                InputTypes.Text,
                "Name",
                category.Name,
                "Super kuhle Kategorie"
            ),
            new(
                InputTypes.Number,
                "Nummer",
                category.Nummer.ToString(),
                "187"
            ),
        };

        var dialogData = await DialogService.OpenDialog(
            "Kategorie hinzufügen", 
            "Welche Kategorie willst du hinzufügen?", 
            "Kategorie hinzufügen",
            inputs);
        if (dialogData is null) return;

        var (validatedName, parsedName) = dialogData[0].ValidateInput<string>();
        if (!validatedName)
        {
            Snackbar.Add("Es wurde kein Name eingetragen!", Severity.Error);
            return;
        }
        
        var (validatedNumber, parsedNumber) = dialogData[1].ValidateInput<int>();
        if (!validatedNumber)
        {
            Snackbar.Add("Es wurde keine Nummer eingetragen!", Severity.Error);
            return;
        }

        category.Name = parsedName!;
        category.Nummer = parsedNumber;

        var response = await SupportfileCategoryProxy.UpdateAsync(category);
        if (!response)
        {
            Snackbar.Add("Kategorie konnte nicht aktualisiert werden!", Severity.Error);
            return;
        }

        Snackbar.Add("Kategorie wurde aktualisiert!", Severity.Success);
        await Load();
    }

    private async Task DeleteEntry(SupportfileCategoryDbModel category)
    {
        var access = await UserAccessService.GetUserAccess();
        if (access is null) return;
        if (!UserAccessService.HasRight(RightEnum.SupportfileCategoryDelete)) return;
        
        var result = await DialogService.ShowMessageBox(
            "Kategorie löschen", 
            "Bist du dir sicher diese Kategorie zu löschen? Dies kann nicht mehr rückgängig gemacht werden!", 
            yesText:"Löschen!", cancelText:"Abbrechen"
        );

        if (result is null or false) return;

        var response = await SupportfileCategoryProxy.DeleteAsync(category.Id);
        if (!response)
        {
            Snackbar.Add("Diese Kategorie konnte nicht gelöscht werden!");
            return;
        }
        
        Snackbar.Add("Kategorie wurde gelöscht!", Severity.Success);
        await Load();
    }

}