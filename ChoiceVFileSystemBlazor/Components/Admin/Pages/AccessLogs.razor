@page "/admin/logs"

@implements IDisposable

@code {
    public const string Url = "/admin/logs";
    public static string GetRedirectUrl() => Url;
}

<PageTitle>AccessLogs Übersicht</PageTitle>

@if (_loading || !_isAuthorized || _shouldRedirect)
{
    <PageLoading/>
}
else
{
    <MudDataGrid
        T="AccessLogsDbModel" MultiSelection="true"
        Items="@_data" SortMode="SortMode.Multiple" Filterable="true"
        QuickFilter="@QuickFilter"
        Hideable="true" Hover="true" Striped="true" FixedHeader="true" Height="75vh">
        <ToolBarContent>
            <MudText Typo="Typo.h6">AccessLogs Übersicht</MudText>
            <MudSpacer />
            <MudTextField
                T="string" @bind-Value="_searchString" Placeholder="@Constants.DATAGRID_SEARCHBAR_PLACEHOLDER"
                Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Hideable="false" Property="x => x.Id" Title="#" Filterable="false" InitialDirection="SortDirection.Descending"/>
            <PropertyColumn Hideable="false" Property="x => x.TargetAccessModel.Name" Title="TargetAccessName" />
            <PropertyColumn Hideable="false" Property="x => x.TargetAccessId" Title="TargetAccessId" />
            <PropertyColumn Hideable="false" Property="x => x.Content" Title="Content" />
            <PropertyColumn Hideable="false" Property="x => x.AccessModel.Name" Title="AccessName" />
            <PropertyColumn Hideable="false" Property="x => x.AccessId" Title="AccessId" />
            <PropertyColumn Hideable="false" Property="x => x.Type" Title="Type" />
            <TemplateColumn Hideable="false" Sortable="true" Filterable="true" Title="CreatedAt">
                <CellTemplate>
                    @context.Item.CreatedAtLocal(UserAccessService.GetUserAccess().Result.Settings.TimeZone)
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AccessLogsDbModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [CascadingParameter] public UserAccessService UserAccessService { get; set; }
    private bool _isAuthorized;
    private bool _shouldRedirect;
    private bool _loading = true;

    private List<AccessLogsDbModel> _data = [];
    
    private string? _searchString;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _isAuthorized = UserAccessService.HasRight(PageRightRegistry.GetNeededRankForPage(Url));
        _shouldRedirect = !_isAuthorized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        if (_shouldRedirect)
        {
            Navigation.NavigateToNotAuthorized();
            return;
        }
            
        await Load();
    
        ReloadService.OnCustomReload += Load;
    }
    
    public void Dispose()
    {
        ReloadService.OnCustomReload -= Load;
    }
    
    private async Task Load()
    {
        _loading = true;
        StateHasChanged();

        _data = await AccessLogsProxy.GetAllAsync();

        _loading = false;
        StateHasChanged();
    }
    
    private Func<AccessLogsDbModel, bool> QuickFilter => x =>
    {
        if (_searchString == null) return true;
        
        var lowerSearchString = _searchString.ToLower();
        
        if (string.IsNullOrWhiteSpace(lowerSearchString))
            return true;

        if (x.Content.ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Type.ToString().ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.CreatedAtLocal(UserAccessService.GetUserAccess().Result.Settings.TimeZone).ToString(CultureInfo.InvariantCulture).ToLower().Contains(lowerSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{x.Id}".ToLower().Contains(lowerSearchString))
            return true;

        return false;
    };
}